
sensorproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001704  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800188c  0800188c  0001188c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080018a4  080018a4  000118a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080018ac  080018ac  000118ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080018b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c4b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001c76  00000000  00000000  0002c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000063b9  00000000  00000000  0002e166  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  00034520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000047c3  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003981  00000000  00000000  0003a103  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003da84  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b58  00000000  00000000  0003db00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001874 	.word	0x08001874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001874 	.word	0x08001874

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fa52 	bl	8000998 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 fa14 	bl	8000930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f9e5 	bl	800090c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 f8a4 	bl	8001694 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005a2:	4604      	mov	r4, r0
 80005a4:	2800      	cmp	r0, #0
 80005a6:	f000 809b 	beq.w	80006e0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005aa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005ac:	b925      	cbnz	r5, 80005b8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ae:	f001 f88d 	bl	80016cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005b2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005b4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ba:	06db      	lsls	r3, r3, #27
 80005bc:	f100 808e 	bmi.w	80006dc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005c6:	f023 0302 	bic.w	r3, r3, #2
 80005ca:	f043 0302 	orr.w	r3, r3, #2
 80005ce:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005d0:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <HAL_ADC_Init+0x144>)
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005d8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	6861      	ldr	r1, [r4, #4]
 80005de:	430a      	orrs	r2, r1
 80005e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005e4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005f6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005f8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005fa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	430a      	orrs	r2, r1
 8000604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000606:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000608:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800060a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800060e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	430a      	orrs	r2, r1
 8000614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000616:	4934      	ldr	r1, [pc, #208]	; (80006e8 <HAL_ADC_Init+0x148>)
 8000618:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800061a:	428a      	cmp	r2, r1
 800061c:	d052      	beq.n	80006c4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800061e:	6899      	ldr	r1, [r3, #8]
 8000620:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000624:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000626:	6899      	ldr	r1, [r3, #8]
 8000628:	430a      	orrs	r2, r1
 800062a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800062c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800062e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800063a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800063c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800063e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000640:	f022 0202 	bic.w	r2, r2, #2
 8000644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800064c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800064e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000652:	2a00      	cmp	r2, #0
 8000654:	d03e      	beq.n	80006d4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000656:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000658:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800065a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800065e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	3901      	subs	r1, #1
 800066c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000670:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000674:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000676:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067e:	3901      	subs	r1, #1
 8000680:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000686:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000688:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800068c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000698:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800069a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800069c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800069e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006a6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006ac:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ae:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006bc:	2300      	movs	r3, #0
 80006be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006d2:	e7b2      	b.n	800063a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006da:	e7c9      	b.n	8000670 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
 80006de:	e7ed      	b.n	80006bc <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006e0:	2001      	movs	r0, #1
}
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
 80006e4:	40012300 	.word	0x40012300
 80006e8:	0f000001 	.word	0x0f000001

080006ec <HAL_ADC_Start>:
{
 80006ec:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006ee:	2300      	movs	r3, #0
 80006f0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d061      	beq.n	80007be <HAL_ADC_Start+0xd2>
 80006fa:	2301      	movs	r3, #1
 80006fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000700:	6803      	ldr	r3, [r0, #0]
 8000702:	689a      	ldr	r2, [r3, #8]
 8000704:	07d1      	lsls	r1, r2, #31
 8000706:	d505      	bpl.n	8000714 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	07d2      	lsls	r2, r2, #31
 800070c:	d414      	bmi.n	8000738 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800070e:	2000      	movs	r0, #0
}
 8000710:	b002      	add	sp, #8
 8000712:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000714:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000716:	492b      	ldr	r1, [pc, #172]	; (80007c4 <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8000718:	f042 0201 	orr.w	r2, r2, #1
 800071c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800071e:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <HAL_ADC_Start+0xdc>)
 8000720:	6812      	ldr	r2, [r2, #0]
 8000722:	fbb2 f2f1 	udiv	r2, r2, r1
 8000726:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800072a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800072c:	9a01      	ldr	r2, [sp, #4]
 800072e:	2a00      	cmp	r2, #0
 8000730:	d0ea      	beq.n	8000708 <HAL_ADC_Start+0x1c>
      counter--;
 8000732:	9a01      	ldr	r2, [sp, #4]
 8000734:	3a01      	subs	r2, #1
 8000736:	e7f8      	b.n	800072a <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000738:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800073a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800073e:	f022 0201 	bic.w	r2, r2, #1
 8000742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000746:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800074c:	bf41      	itttt	mi
 800074e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000750:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000754:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000758:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800075a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800075c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000760:	bf1c      	itt	ne
 8000762:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000764:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000768:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800076a:	2200      	movs	r2, #0
 800076c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000770:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000774:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <HAL_ADC_Start+0xe0>)
 8000778:	6851      	ldr	r1, [r2, #4]
 800077a:	f011 0f1f 	tst.w	r1, #31
 800077e:	4914      	ldr	r1, [pc, #80]	; (80007d0 <HAL_ADC_Start+0xe4>)
 8000780:	d11a      	bne.n	80007b8 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000782:	428b      	cmp	r3, r1
 8000784:	d006      	beq.n	8000794 <HAL_ADC_Start+0xa8>
 8000786:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800078a:	428b      	cmp	r3, r1
 800078c:	d10b      	bne.n	80007a6 <HAL_ADC_Start+0xba>
 800078e:	6852      	ldr	r2, [r2, #4]
 8000790:	06d2      	lsls	r2, r2, #27
 8000792:	d1bc      	bne.n	800070e <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000794:	6898      	ldr	r0, [r3, #8]
 8000796:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800079a:	d1b8      	bne.n	800070e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	e7b4      	b.n	8000710 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007a6:	490b      	ldr	r1, [pc, #44]	; (80007d4 <HAL_ADC_Start+0xe8>)
 80007a8:	428b      	cmp	r3, r1
 80007aa:	d1b0      	bne.n	800070e <HAL_ADC_Start+0x22>
 80007ac:	6852      	ldr	r2, [r2, #4]
 80007ae:	f002 021f 	and.w	r2, r2, #31
 80007b2:	2a0f      	cmp	r2, #15
 80007b4:	d9ee      	bls.n	8000794 <HAL_ADC_Start+0xa8>
 80007b6:	e7aa      	b.n	800070e <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007b8:	428b      	cmp	r3, r1
 80007ba:	d1a8      	bne.n	800070e <HAL_ADC_Start+0x22>
 80007bc:	e7ea      	b.n	8000794 <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80007be:	2002      	movs	r0, #2
 80007c0:	e7a6      	b.n	8000710 <HAL_ADC_Start+0x24>
 80007c2:	bf00      	nop
 80007c4:	000f4240 	.word	0x000f4240
 80007c8:	20000008 	.word	0x20000008
 80007cc:	40012300 	.word	0x40012300
 80007d0:	40012000 	.word	0x40012000
 80007d4:	40012200 	.word	0x40012200

080007d8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80007d8:	6803      	ldr	r3, [r0, #0]
 80007da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_ADC_ConfigChannel>:
{
 80007e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	f000 8083 	beq.w	80008f6 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007f0:	680d      	ldr	r5, [r1, #0]
 80007f2:	6804      	ldr	r4, [r0, #0]
 80007f4:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80007f6:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007f8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80007fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80007fe:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000800:	d92a      	bls.n	8000858 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000802:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000806:	68e7      	ldr	r7, [r4, #12]
 8000808:	3b1e      	subs	r3, #30
 800080a:	f04f 0e07 	mov.w	lr, #7
 800080e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000812:	ea27 070e 	bic.w	r7, r7, lr
 8000816:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000818:	68e7      	ldr	r7, [r4, #12]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	433b      	orrs	r3, r7
 8000820:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000822:	684a      	ldr	r2, [r1, #4]
 8000824:	2a06      	cmp	r2, #6
 8000826:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800082a:	d825      	bhi.n	8000878 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800082c:	4413      	add	r3, r2
 800082e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000830:	1f59      	subs	r1, r3, #5
 8000832:	231f      	movs	r3, #31
 8000834:	408b      	lsls	r3, r1
 8000836:	ea27 0303 	bic.w	r3, r7, r3
 800083a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800083c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800083e:	fa06 f101 	lsl.w	r1, r6, r1
 8000842:	4311      	orrs	r1, r2
 8000844:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <HAL_ADC_ConfigChannel+0x11c>)
 8000848:	429c      	cmp	r4, r3
 800084a:	d034      	beq.n	80008b6 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 800084c:	2300      	movs	r3, #0
 800084e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000852:	4618      	mov	r0, r3
}
 8000854:	b003      	add	sp, #12
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000858:	6927      	ldr	r7, [r4, #16]
 800085a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800085e:	f04f 0e07 	mov.w	lr, #7
 8000862:	fa0e fe03 	lsl.w	lr, lr, r3
 8000866:	ea27 070e 	bic.w	r7, r7, lr
 800086a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800086c:	6927      	ldr	r7, [r4, #16]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	433b      	orrs	r3, r7
 8000874:	6123      	str	r3, [r4, #16]
 8000876:	e7d4      	b.n	8000822 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000878:	2a0c      	cmp	r2, #12
 800087a:	d80e      	bhi.n	800089a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800087c:	4413      	add	r3, r2
 800087e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000880:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000884:	231f      	movs	r3, #31
 8000886:	4093      	lsls	r3, r2
 8000888:	ea21 0303 	bic.w	r3, r1, r3
 800088c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800088e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000890:	fa06 f202 	lsl.w	r2, r6, r2
 8000894:	431a      	orrs	r2, r3
 8000896:	6322      	str	r2, [r4, #48]	; 0x30
 8000898:	e7d5      	b.n	8000846 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800089a:	4413      	add	r3, r2
 800089c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800089e:	3b41      	subs	r3, #65	; 0x41
 80008a0:	221f      	movs	r2, #31
 80008a2:	409a      	lsls	r2, r3
 80008a4:	ea21 0202 	bic.w	r2, r1, r2
 80008a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008ac:	fa06 f103 	lsl.w	r1, r6, r3
 80008b0:	4311      	orrs	r1, r2
 80008b2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80008b4:	e7c7      	b.n	8000846 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008b6:	2d12      	cmp	r5, #18
 80008b8:	d104      	bne.n	80008c4 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_ADC_ConfigChannel+0x120>)
 80008bc:	6853      	ldr	r3, [r2, #4]
 80008be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008c4:	f1a5 0310 	sub.w	r3, r5, #16
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d8bf      	bhi.n	800084c <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <HAL_ADC_ConfigChannel+0x120>)
 80008ce:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d0:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008d6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d8:	d1b8      	bne.n	800084c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_ADC_ConfigChannel+0x124>)
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_ADC_ConfigChannel+0x128>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80008e4:	230a      	movs	r3, #10
 80008e6:	4353      	muls	r3, r2
        counter--;
 80008e8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80008ea:	9b01      	ldr	r3, [sp, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0ad      	beq.n	800084c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80008f0:	9b01      	ldr	r3, [sp, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	e7f8      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80008f6:	2002      	movs	r0, #2
 80008f8:	e7ac      	b.n	8000854 <HAL_ADC_ConfigChannel+0x74>
 80008fa:	bf00      	nop
 80008fc:	40012000 	.word	0x40012000
 8000900:	40012300 	.word	0x40012300
 8000904:	20000008 	.word	0x20000008
 8000908:	000f4240 	.word	0x000f4240

0800090c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800090e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000910:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000914:	041b      	lsls	r3, r3, #16
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	0200      	lsls	r0, r0, #8
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000926:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000928:	60d3      	str	r3, [r2, #12]
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000932:	b530      	push	{r4, r5, lr}
 8000934:	68dc      	ldr	r4, [r3, #12]
 8000936:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	2b04      	cmp	r3, #4
 8000942:	bf28      	it	cs
 8000944:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 0501 	mov.w	r5, #1
 800094c:	fa05 f303 	lsl.w	r3, r5, r3
 8000950:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000954:	bf8c      	ite	hi
 8000956:	3c03      	subhi	r4, #3
 8000958:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095a:	4019      	ands	r1, r3
 800095c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095e:	fa05 f404 	lsl.w	r4, r5, r4
 8000962:	3c01      	subs	r4, #1
 8000964:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000966:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	ea42 0201 	orr.w	r2, r2, r1
 800096c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	bfad      	iteet	ge
 8000972:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	f000 000f 	andlt.w	r0, r0, #15
 800097a:	4b06      	ldrlt	r3, [pc, #24]	; (8000994 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	bfb5      	itete	lt
 8000982:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800098c:	bd30      	pop	{r4, r5, pc}
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	e000ed14 	.word	0xe000ed14

08000998 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	3801      	subs	r0, #1
 800099a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800099e:	d20a      	bcs.n	80009b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	21f0      	movs	r1, #240	; 0xf0
 80009a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000b7c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d0:	4a68      	ldr	r2, [pc, #416]	; (8000b74 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000b80 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009d8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80009da:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009dc:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80009de:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80009e2:	42ac      	cmp	r4, r5
 80009e4:	f040 80b0 	bne.w	8000b48 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e8:	684c      	ldr	r4, [r1, #4]
 80009ea:	f024 0c10 	bic.w	ip, r4, #16
 80009ee:	f10c 36ff 	add.w	r6, ip, #4294967295
 80009f2:	2e01      	cmp	r6, #1
 80009f4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80009f8:	d812      	bhi.n	8000a20 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80009fa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009fc:	2603      	movs	r6, #3
 80009fe:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a02:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a06:	68ce      	ldr	r6, [r1, #12]
 8000a08:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a0c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000a0e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a10:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a12:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a16:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a1a:	409e      	lsls	r6, r3
 8000a1c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000a1e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a20:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000a22:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a24:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a28:	43f6      	mvns	r6, r6
 8000a2a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2e:	688f      	ldr	r7, [r1, #8]
 8000a30:	fa07 f70e 	lsl.w	r7, r7, lr
 8000a34:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a38:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000a3c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3e:	d116      	bne.n	8000a6e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000a40:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a44:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a48:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a4c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a54:	f04f 0c0f 	mov.w	ip, #15
 8000a58:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a5c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a60:	690f      	ldr	r7, [r1, #16]
 8000a62:	fa07 f70b 	lsl.w	r7, r7, fp
 8000a66:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a6a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000a6e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a70:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a72:	f004 0703 	and.w	r7, r4, #3
 8000a76:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000a7a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000a7e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a80:	00e6      	lsls	r6, r4, #3
 8000a82:	d561      	bpl.n	8000b48 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a84:	f04f 0b00 	mov.w	fp, #0
 8000a88:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a8c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a90:	4e39      	ldr	r6, [pc, #228]	; (8000b78 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a96:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a9a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a9e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000aa2:	9703      	str	r7, [sp, #12]
 8000aa4:	9f03      	ldr	r7, [sp, #12]
 8000aa6:	f023 0703 	bic.w	r7, r3, #3
 8000aaa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000aae:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ab2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000abe:	f04f 0e0f 	mov.w	lr, #15
 8000ac2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000acc:	d043      	beq.n	8000b56 <HAL_GPIO_Init+0x192>
 8000ace:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ad2:	42b0      	cmp	r0, r6
 8000ad4:	d041      	beq.n	8000b5a <HAL_GPIO_Init+0x196>
 8000ad6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ada:	42b0      	cmp	r0, r6
 8000adc:	d03f      	beq.n	8000b5e <HAL_GPIO_Init+0x19a>
 8000ade:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ae2:	42b0      	cmp	r0, r6
 8000ae4:	d03d      	beq.n	8000b62 <HAL_GPIO_Init+0x19e>
 8000ae6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000aea:	42b0      	cmp	r0, r6
 8000aec:	d03b      	beq.n	8000b66 <HAL_GPIO_Init+0x1a2>
 8000aee:	4548      	cmp	r0, r9
 8000af0:	d03b      	beq.n	8000b6a <HAL_GPIO_Init+0x1a6>
 8000af2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000af6:	42b0      	cmp	r0, r6
 8000af8:	d039      	beq.n	8000b6e <HAL_GPIO_Init+0x1aa>
 8000afa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000afe:	42b0      	cmp	r0, r6
 8000b00:	bf14      	ite	ne
 8000b02:	2608      	movne	r6, #8
 8000b04:	2607      	moveq	r6, #7
 8000b06:	fa06 f60c 	lsl.w	r6, r6, ip
 8000b0a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b0e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000b10:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b12:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b18:	bf0c      	ite	eq
 8000b1a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000b1c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000b1e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000b20:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b22:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b26:	bf0c      	ite	eq
 8000b28:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000b2a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000b2c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b2e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b30:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b34:	bf0c      	ite	eq
 8000b36:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000b38:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000b3a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000b3c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b40:	bf54      	ite	pl
 8000b42:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000b44:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000b46:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b48:	3301      	adds	r3, #1
 8000b4a:	2b10      	cmp	r3, #16
 8000b4c:	f47f af45 	bne.w	80009da <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b50:	b005      	add	sp, #20
 8000b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b56:	465e      	mov	r6, fp
 8000b58:	e7d5      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b5a:	2601      	movs	r6, #1
 8000b5c:	e7d3      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b5e:	2602      	movs	r6, #2
 8000b60:	e7d1      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b62:	2603      	movs	r6, #3
 8000b64:	e7cf      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b66:	2604      	movs	r6, #4
 8000b68:	e7cd      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b6a:	2605      	movs	r6, #5
 8000b6c:	e7cb      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b6e:	2606      	movs	r6, #6
 8000b70:	e7c9      	b.n	8000b06 <HAL_GPIO_Init+0x142>
 8000b72:	bf00      	nop
 8000b74:	40013c00 	.word	0x40013c00
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40021400 	.word	0x40021400

08000b84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b84:	b10a      	cbz	r2, 8000b8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b86:	6181      	str	r1, [r0, #24]
 8000b88:	4770      	bx	lr
 8000b8a:	0409      	lsls	r1, r1, #16
 8000b8c:	e7fb      	b.n	8000b86 <HAL_GPIO_WritePin+0x2>

08000b8e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b8e:	6943      	ldr	r3, [r0, #20]
 8000b90:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b94:	bf08      	it	eq
 8000b96:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b98:	6181      	str	r1, [r0, #24]
 8000b9a:	4770      	bx	lr

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	b908      	cbnz	r0, 8000ba8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	e03f      	b.n	8000c28 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba8:	6803      	ldr	r3, [r0, #0]
 8000baa:	07dd      	lsls	r5, r3, #31
 8000bac:	d410      	bmi.n	8000bd0 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	0798      	lsls	r0, r3, #30
 8000bb2:	d45a      	bmi.n	8000c6a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	071a      	lsls	r2, r3, #28
 8000bb8:	f100 809c 	bmi.w	8000cf4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	075b      	lsls	r3, r3, #29
 8000bc0:	f100 80ba 	bmi.w	8000d38 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bc4:	69a0      	ldr	r0, [r4, #24]
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	f040 811b 	bne.w	8000e02 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000bcc:	2000      	movs	r0, #0
 8000bce:	e02b      	b.n	8000c28 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd0:	4ba4      	ldr	r3, [pc, #656]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	f002 020c 	and.w	r2, r2, #12
 8000bd8:	2a04      	cmp	r2, #4
 8000bda:	d007      	beq.n	8000bec <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000be2:	2a08      	cmp	r2, #8
 8000be4:	d10a      	bne.n	8000bfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	0259      	lsls	r1, r3, #9
 8000bea:	d507      	bpl.n	8000bfc <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	4b9d      	ldr	r3, [pc, #628]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	039a      	lsls	r2, r3, #14
 8000bf2:	d5dc      	bpl.n	8000bae <HAL_RCC_OscConfig+0x12>
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1d9      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
 8000bfa:	e7d3      	b.n	8000ba4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfc:	6863      	ldr	r3, [r4, #4]
 8000bfe:	4d99      	ldr	r5, [pc, #612]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d113      	bne.n	8000c2e <HAL_RCC_OscConfig+0x92>
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fcad 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	4d94      	ldr	r5, [pc, #592]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000c14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	682b      	ldr	r3, [r5, #0]
 8000c18:	039b      	lsls	r3, r3, #14
 8000c1a:	d4c8      	bmi.n	8000bae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fca6 	bl	800056c <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2864      	cmp	r0, #100	; 0x64
 8000c24:	d9f7      	bls.n	8000c16 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
}
 8000c28:	b002      	add	sp, #8
 8000c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c32:	d104      	bne.n	8000c3e <HAL_RCC_OscConfig+0xa2>
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3a:	602b      	str	r3, [r5, #0]
 8000c3c:	e7e3      	b.n	8000c06 <HAL_RCC_OscConfig+0x6a>
 8000c3e:	682a      	ldr	r2, [r5, #0]
 8000c40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c44:	602a      	str	r2, [r5, #0]
 8000c46:	682a      	ldr	r2, [r5, #0]
 8000c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c4c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1dd      	bne.n	8000c0e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000c52:	f7ff fc8b 	bl	800056c <HAL_GetTick>
 8000c56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	039f      	lsls	r7, r3, #14
 8000c5c:	d5a7      	bpl.n	8000bae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5e:	f7ff fc85 	bl	800056c <HAL_GetTick>
 8000c62:	1b80      	subs	r0, r0, r6
 8000c64:	2864      	cmp	r0, #100	; 0x64
 8000c66:	d9f7      	bls.n	8000c58 <HAL_RCC_OscConfig+0xbc>
 8000c68:	e7dd      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c6a:	4b7e      	ldr	r3, [pc, #504]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	f012 0f0c 	tst.w	r2, #12
 8000c72:	d007      	beq.n	8000c84 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c7a:	2a08      	cmp	r2, #8
 8000c7c:	d111      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	025e      	lsls	r6, r3, #9
 8000c82:	d40e      	bmi.n	8000ca2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	0795      	lsls	r5, r2, #30
 8000c8a:	d502      	bpl.n	8000c92 <HAL_RCC_OscConfig+0xf6>
 8000c8c:	68e2      	ldr	r2, [r4, #12]
 8000c8e:	2a01      	cmp	r2, #1
 8000c90:	d188      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	6921      	ldr	r1, [r4, #16]
 8000c96:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca0:	e788      	b.n	8000bb4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ca2:	68e2      	ldr	r2, [r4, #12]
 8000ca4:	4b70      	ldr	r3, [pc, #448]	; (8000e68 <HAL_RCC_OscConfig+0x2cc>)
 8000ca6:	b1b2      	cbz	r2, 8000cd6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cac:	f7ff fc5e 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	4d6c      	ldr	r5, [pc, #432]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000cb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	0798      	lsls	r0, r3, #30
 8000cb8:	d507      	bpl.n	8000cca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	682b      	ldr	r3, [r5, #0]
 8000cbc:	6922      	ldr	r2, [r4, #16]
 8000cbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cc6:	602b      	str	r3, [r5, #0]
 8000cc8:	e774      	b.n	8000bb4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cca:	f7ff fc4f 	bl	800056c <HAL_GetTick>
 8000cce:	1b80      	subs	r0, r0, r6
 8000cd0:	2802      	cmp	r0, #2
 8000cd2:	d9ef      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x118>
 8000cd4:	e7a7      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc48 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cdc:	4d61      	ldr	r5, [pc, #388]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000cde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	0799      	lsls	r1, r3, #30
 8000ce4:	f57f af66 	bpl.w	8000bb4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fc40 	bl	800056c <HAL_GetTick>
 8000cec:	1b80      	subs	r0, r0, r6
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d9f6      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x144>
 8000cf2:	e798      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cf4:	6962      	ldr	r2, [r4, #20]
 8000cf6:	4b5d      	ldr	r3, [pc, #372]	; (8000e6c <HAL_RCC_OscConfig+0x2d0>)
 8000cf8:	b17a      	cbz	r2, 8000d1a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cfe:	f7ff fc35 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d02:	4d58      	ldr	r5, [pc, #352]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000d04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d08:	079f      	lsls	r7, r3, #30
 8000d0a:	f53f af57 	bmi.w	8000bbc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fc2d 	bl	800056c <HAL_GetTick>
 8000d12:	1b80      	subs	r0, r0, r6
 8000d14:	2802      	cmp	r0, #2
 8000d16:	d9f6      	bls.n	8000d06 <HAL_RCC_OscConfig+0x16a>
 8000d18:	e785      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000d1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fc26 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	4d50      	ldr	r5, [pc, #320]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000d22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d26:	0798      	lsls	r0, r3, #30
 8000d28:	f57f af48 	bpl.w	8000bbc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2c:	f7ff fc1e 	bl	800056c <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	2802      	cmp	r0, #2
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x188>
 8000d36:	e776      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d38:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000d40:	d128      	bne.n	8000d94 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	9201      	str	r2, [sp, #4]
 8000d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d58:	4d45      	ldr	r5, [pc, #276]	; (8000e70 <HAL_RCC_OscConfig+0x2d4>)
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	05d9      	lsls	r1, r3, #23
 8000d5e:	d51b      	bpl.n	8000d98 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	68a3      	ldr	r3, [r4, #8]
 8000d62:	4d40      	ldr	r5, [pc, #256]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d127      	bne.n	8000db8 <HAL_RCC_OscConfig+0x21c>
 8000d68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d70:	f7ff fbfc 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d74:	4d3b      	ldr	r5, [pc, #236]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000d76:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d7e:	079b      	lsls	r3, r3, #30
 8000d80:	d539      	bpl.n	8000df6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f43f af1e 	beq.w	8000bc4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d88:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000d8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	e717      	b.n	8000bc4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000d94:	2600      	movs	r6, #0
 8000d96:	e7df      	b.n	8000d58 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000da0:	f7ff fbe4 	bl	800056c <HAL_GetTick>
 8000da4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da6:	682b      	ldr	r3, [r5, #0]
 8000da8:	05da      	lsls	r2, r3, #23
 8000daa:	d4d9      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dac:	f7ff fbde 	bl	800056c <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f7      	bls.n	8000da6 <HAL_RCC_OscConfig+0x20a>
 8000db6:	e736      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d104      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x22a>
 8000dbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	672b      	str	r3, [r5, #112]	; 0x70
 8000dc4:	e7d0      	b.n	8000d68 <HAL_RCC_OscConfig+0x1cc>
 8000dc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000dc8:	f022 0201 	bic.w	r2, r2, #1
 8000dcc:	672a      	str	r2, [r5, #112]	; 0x70
 8000dce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000dd0:	f022 0204 	bic.w	r2, r2, #4
 8000dd4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1ca      	bne.n	8000d70 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000dda:	f7ff fbc7 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dde:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000de2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000de6:	0798      	lsls	r0, r3, #30
 8000de8:	d5cb      	bpl.n	8000d82 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dea:	f7ff fbbf 	bl	800056c <HAL_GetTick>
 8000dee:	1bc0      	subs	r0, r0, r7
 8000df0:	4540      	cmp	r0, r8
 8000df2:	d9f7      	bls.n	8000de4 <HAL_RCC_OscConfig+0x248>
 8000df4:	e717      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	f7ff fbb9 	bl	800056c <HAL_GetTick>
 8000dfa:	1bc0      	subs	r0, r0, r7
 8000dfc:	4540      	cmp	r0, r8
 8000dfe:	d9bd      	bls.n	8000d7c <HAL_RCC_OscConfig+0x1e0>
 8000e00:	e711      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e02:	4d18      	ldr	r5, [pc, #96]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
 8000e04:	68ab      	ldr	r3, [r5, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d047      	beq.n	8000e9e <HAL_RCC_OscConfig+0x302>
 8000e0e:	4e19      	ldr	r6, [pc, #100]	; (8000e74 <HAL_RCC_OscConfig+0x2d8>)
 8000e10:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e12:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000e14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e16:	d135      	bne.n	8000e84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000e18:	f7ff fba8 	bl	800056c <HAL_GetTick>
 8000e1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e1e:	682b      	ldr	r3, [r5, #0]
 8000e20:	0199      	lsls	r1, r3, #6
 8000e22:	d429      	bmi.n	8000e78 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e24:	6a22      	ldr	r2, [r4, #32]
 8000e26:	69e3      	ldr	r3, [r4, #28]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e3a:	0852      	lsrs	r2, r2, #1
 8000e3c:	3a01      	subs	r2, #1
 8000e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e42:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e44:	2301      	movs	r3, #1
 8000e46:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e48:	f7ff fb90 	bl	800056c <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	019a      	lsls	r2, r3, #6
 8000e52:	f53f aebb 	bmi.w	8000bcc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e56:	f7ff fb89 	bl	800056c <HAL_GetTick>
 8000e5a:	1b40      	subs	r0, r0, r5
 8000e5c:	2802      	cmp	r0, #2
 8000e5e:	d9f6      	bls.n	8000e4e <HAL_RCC_OscConfig+0x2b2>
 8000e60:	e6e1      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	42470000 	.word	0x42470000
 8000e6c:	42470e80 	.word	0x42470e80
 8000e70:	40007000 	.word	0x40007000
 8000e74:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e78:	f7ff fb78 	bl	800056c <HAL_GetTick>
 8000e7c:	1bc0      	subs	r0, r0, r7
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9cd      	bls.n	8000e1e <HAL_RCC_OscConfig+0x282>
 8000e82:	e6d0      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000e84:	f7ff fb72 	bl	800056c <HAL_GetTick>
 8000e88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e8a:	682b      	ldr	r3, [r5, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	f57f ae9d 	bpl.w	8000bcc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e92:	f7ff fb6b 	bl	800056c <HAL_GetTick>
 8000e96:	1b00      	subs	r0, r0, r4
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9f6      	bls.n	8000e8a <HAL_RCC_OscConfig+0x2ee>
 8000e9c:	e6c3      	b.n	8000c26 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e9e:	2801      	cmp	r0, #1
 8000ea0:	f43f aec2 	beq.w	8000c28 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000ea4:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ea6:	69e3      	ldr	r3, [r4, #28]
 8000ea8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f47f ae79 	bne.w	8000ba4 <HAL_RCC_OscConfig+0x8>
 8000eb2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000eb4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	f47f ae73 	bne.w	8000ba4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ec4:	4003      	ands	r3, r0
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f47f ae6c 	bne.w	8000ba4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ecc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ece:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	f47f ae66 	bne.w	8000ba4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ed8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000eda:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000ede:	1ac0      	subs	r0, r0, r3
 8000ee0:	bf18      	it	ne
 8000ee2:	2001      	movne	r0, #1
 8000ee4:	e6a0      	b.n	8000c28 <HAL_RCC_OscConfig+0x8c>
 8000ee6:	bf00      	nop

08000ee8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee8:	4913      	ldr	r1, [pc, #76]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000eea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eec:	688b      	ldr	r3, [r1, #8]
 8000eee:	f003 030c 	and.w	r3, r3, #12
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d003      	beq.n	8000efe <HAL_RCC_GetSysClockFreq+0x16>
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d003      	beq.n	8000f02 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000efc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x58>)
 8000f00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f04:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f0c:	bf14      	ite	ne
 8000f0e:	480c      	ldrne	r0, [pc, #48]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f10:	480a      	ldreq	r0, [pc, #40]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f16:	bf18      	it	ne
 8000f18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f1e:	fba1 0100 	umull	r0, r1, r1, r0
 8000f22:	f7ff f951 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f2e:	3301      	adds	r3, #1
 8000f30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000f32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f36:	bd08      	pop	{r3, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	00f42400 	.word	0x00f42400
 8000f40:	017d7840 	.word	0x017d7840

08000f44 <HAL_RCC_ClockConfig>:
{
 8000f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	b910      	cbnz	r0, 8000f54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f54:	4b44      	ldr	r3, [pc, #272]	; (8001068 <HAL_RCC_ClockConfig+0x124>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	f002 020f 	and.w	r2, r2, #15
 8000f5c:	428a      	cmp	r2, r1
 8000f5e:	d329      	bcc.n	8000fb4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f60:	6821      	ldr	r1, [r4, #0]
 8000f62:	078f      	lsls	r7, r1, #30
 8000f64:	d42e      	bmi.n	8000fc4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f66:	07c8      	lsls	r0, r1, #31
 8000f68:	d441      	bmi.n	8000fee <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <HAL_RCC_ClockConfig+0x124>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f002 020f 	and.w	r2, r2, #15
 8000f72:	4295      	cmp	r5, r2
 8000f74:	d367      	bcc.n	8001046 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f76:	6822      	ldr	r2, [r4, #0]
 8000f78:	0751      	lsls	r1, r2, #29
 8000f7a:	d46d      	bmi.n	8001058 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	0713      	lsls	r3, r2, #28
 8000f7e:	d507      	bpl.n	8000f90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f80:	4a3a      	ldr	r2, [pc, #232]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8000f82:	6921      	ldr	r1, [r4, #16]
 8000f84:	6893      	ldr	r3, [r2, #8]
 8000f86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f90:	f7ff ffaa 	bl	8000ee8 <HAL_RCC_GetSysClockFreq>
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8000f96:	4a36      	ldr	r2, [pc, #216]	; (8001070 <HAL_RCC_ClockConfig+0x12c>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	40d8      	lsrs	r0, r3
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_RCC_ClockConfig+0x130>)
 8000fa4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <HAL_RCC_ClockConfig+0x134>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f7ff fa95 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb4:	b2ca      	uxtb	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d1c5      	bne.n	8000f4e <HAL_RCC_ClockConfig+0xa>
 8000fc2:	e7cd      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1c>
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fca:	bf1e      	ittt	ne
 8000fcc:	689a      	ldrne	r2, [r3, #8]
 8000fce:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000fd2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd6:	bf42      	ittt	mi
 8000fd8:	689a      	ldrmi	r2, [r3, #8]
 8000fda:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000fde:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	68a0      	ldr	r0, [r4, #8]
 8000fe4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fe8:	4302      	orrs	r2, r0
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e7bb      	b.n	8000f66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fee:	6862      	ldr	r2, [r4, #4]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8000ff2:	2a01      	cmp	r2, #1
 8000ff4:	d11d      	bne.n	8001032 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	d0a7      	beq.n	8000f4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffe:	4e1b      	ldr	r6, [pc, #108]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8001000:	68b3      	ldr	r3, [r6, #8]
 8001002:	f023 0303 	bic.w	r3, r3, #3
 8001006:	4313      	orrs	r3, r2
 8001008:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800100a:	f7ff faaf 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001012:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001014:	68b3      	ldr	r3, [r6, #8]
 8001016:	6862      	ldr	r2, [r4, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001020:	d0a3      	beq.n	8000f6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001022:	f7ff faa3 	bl	800056c <HAL_GetTick>
 8001026:	1bc0      	subs	r0, r0, r7
 8001028:	4540      	cmp	r0, r8
 800102a:	d9f3      	bls.n	8001014 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800102c:	2003      	movs	r0, #3
}
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001032:	1e91      	subs	r1, r2, #2
 8001034:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001036:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001038:	d802      	bhi.n	8001040 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800103e:	e7dd      	b.n	8000ffc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	f013 0f02 	tst.w	r3, #2
 8001044:	e7da      	b.n	8000ffc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	b2ea      	uxtb	r2, r5
 8001048:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	429d      	cmp	r5, r3
 8001052:	f47f af7c 	bne.w	8000f4e <HAL_RCC_ClockConfig+0xa>
 8001056:	e78e      	b.n	8000f76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 800105a:	68e0      	ldr	r0, [r4, #12]
 800105c:	688b      	ldr	r3, [r1, #8]
 800105e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001062:	4303      	orrs	r3, r0
 8001064:	608b      	str	r3, [r1, #8]
 8001066:	e789      	b.n	8000f7c <HAL_RCC_ClockConfig+0x38>
 8001068:	40023c00 	.word	0x40023c00
 800106c:	40023800 	.word	0x40023800
 8001070:	0800188c 	.word	0x0800188c
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800108a:	6810      	ldr	r0, [r2, #0]
}
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4770      	bx	lr
 8001090:	40023800 	.word	0x40023800
 8001094:	0800189c 	.word	0x0800189c
 8001098:	20000008 	.word	0x20000008

0800109c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010aa:	6810      	ldr	r0, [r2, #0]
}
 80010ac:	40d8      	lsrs	r0, r3
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800
 80010b4:	0800189c 	.word	0x0800189c
 80010b8:	20000008 	.word	0x20000008

080010bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80010be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010c0:	4290      	cmp	r0, r2
 80010c2:	d012      	beq.n	80010ea <TIM_Base_SetConfig+0x2e>
 80010c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010c8:	d00f      	beq.n	80010ea <TIM_Base_SetConfig+0x2e>
 80010ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80010ce:	4290      	cmp	r0, r2
 80010d0:	d00b      	beq.n	80010ea <TIM_Base_SetConfig+0x2e>
 80010d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010d6:	4290      	cmp	r0, r2
 80010d8:	d007      	beq.n	80010ea <TIM_Base_SetConfig+0x2e>
 80010da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010de:	4290      	cmp	r0, r2
 80010e0:	d003      	beq.n	80010ea <TIM_Base_SetConfig+0x2e>
 80010e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80010e6:	4290      	cmp	r0, r2
 80010e8:	d119      	bne.n	800111e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80010ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80010f0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <TIM_Base_SetConfig+0xc4>)
 80010f4:	4290      	cmp	r0, r2
 80010f6:	d029      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 80010f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010fc:	d026      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 80010fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001102:	4290      	cmp	r0, r2
 8001104:	d022      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 8001106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800110a:	4290      	cmp	r0, r2
 800110c:	d01e      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 800110e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001112:	4290      	cmp	r0, r2
 8001114:	d01a      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 8001116:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800111a:	4290      	cmp	r0, r2
 800111c:	d016      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 800111e:	4a19      	ldr	r2, [pc, #100]	; (8001184 <TIM_Base_SetConfig+0xc8>)
 8001120:	4290      	cmp	r0, r2
 8001122:	d013      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 8001124:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001128:	4290      	cmp	r0, r2
 800112a:	d00f      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 800112c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001130:	4290      	cmp	r0, r2
 8001132:	d00b      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 8001134:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001138:	4290      	cmp	r0, r2
 800113a:	d007      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 800113c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001140:	4290      	cmp	r0, r2
 8001142:	d003      	beq.n	800114c <TIM_Base_SetConfig+0x90>
 8001144:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001148:	4290      	cmp	r0, r2
 800114a:	d103      	bne.n	8001154 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800114c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800114e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001152:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001154:	694a      	ldr	r2, [r1, #20]
 8001156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800115a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800115c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800115e:	688b      	ldr	r3, [r1, #8]
 8001160:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001162:	680b      	ldr	r3, [r1, #0]
 8001164:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <TIM_Base_SetConfig+0xc4>)
 8001168:	4298      	cmp	r0, r3
 800116a:	d003      	beq.n	8001174 <TIM_Base_SetConfig+0xb8>
 800116c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001170:	4298      	cmp	r0, r3
 8001172:	d101      	bne.n	8001178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001174:	690b      	ldr	r3, [r1, #16]
 8001176:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001178:	2301      	movs	r3, #1
 800117a:	6143      	str	r3, [r0, #20]
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40010000 	.word	0x40010000
 8001184:	40014000 	.word	0x40014000

08001188 <HAL_TIM_Base_Init>:
{
 8001188:	b510      	push	{r4, lr}
  if (htim == NULL)
 800118a:	4604      	mov	r4, r0
 800118c:	b1a0      	cbz	r0, 80011b8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800118e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001192:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001196:	b91b      	cbnz	r3, 80011a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001198:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800119c:	f000 faae 	bl	80016fc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011a6:	6820      	ldr	r0, [r4, #0]
 80011a8:	1d21      	adds	r1, r4, #4
 80011aa:	f7ff ff87 	bl	80010bc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80011b4:	2000      	movs	r0, #0
 80011b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011b8:	2001      	movs	r0, #1
}
 80011ba:	bd10      	pop	{r4, pc}

080011bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80011bc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80011be:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011c0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80011ca:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011cc:	6083      	str	r3, [r0, #8]
 80011ce:	bd10      	pop	{r4, pc}

080011d0 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 80011d0:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80011d2:	684a      	ldr	r2, [r1, #4]
{
 80011d4:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 80011d6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80011d8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80011da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80011de:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80011e0:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80011e4:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 80011e6:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80011e8:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80011ea:	d01e      	beq.n	800122a <TIM_SlaveTimer_SetConfig+0x5a>
 80011ec:	d803      	bhi.n	80011f6 <TIM_SlaveTimer_SetConfig+0x26>
 80011ee:	2a40      	cmp	r2, #64	; 0x40
 80011f0:	d00b      	beq.n	800120a <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 80011f6:	2a60      	cmp	r2, #96	; 0x60
 80011f8:	d027      	beq.n	800124a <TIM_SlaveTimer_SetConfig+0x7a>
 80011fa:	2a70      	cmp	r2, #112	; 0x70
 80011fc:	d1f9      	bne.n	80011f2 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 80011fe:	690b      	ldr	r3, [r1, #16]
 8001200:	688a      	ldr	r2, [r1, #8]
 8001202:	68c9      	ldr	r1, [r1, #12]
 8001204:	f7ff ffda 	bl	80011bc <TIM_ETR_SetConfig>
 8001208:	e7f3      	b.n	80011f2 <TIM_SlaveTimer_SetConfig+0x22>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800120a:	2c05      	cmp	r4, #5
 800120c:	d030      	beq.n	8001270 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 800120e:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001210:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001212:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800121a:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800121c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001220:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001224:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001226:	6202      	str	r2, [r0, #32]
 8001228:	e7e3      	b.n	80011f2 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800122a:	688a      	ldr	r2, [r1, #8]
 800122c:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800122e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001230:	6a04      	ldr	r4, [r0, #32]
 8001232:	f024 0401 	bic.w	r4, r4, #1
 8001236:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001238:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800123a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800123e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001242:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001246:	430a      	orrs	r2, r1
 8001248:	e7ec      	b.n	8001224 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800124a:	688c      	ldr	r4, [r1, #8]
 800124c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800124e:	6a01      	ldr	r1, [r0, #32]
 8001250:	f021 0110 	bic.w	r1, r1, #16
 8001254:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001256:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001258:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800125a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800125e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001262:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001266:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800126a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800126c:	6203      	str	r3, [r0, #32]
 800126e:	e7c0      	b.n	80011f2 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	bd38      	pop	{r3, r4, r5, pc}

08001274 <HAL_TIM_SlaveConfigSynchro>:
{
 8001274:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001276:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800127a:	2b01      	cmp	r3, #1
{
 800127c:	4604      	mov	r4, r0
 800127e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001282:	d01c      	beq.n	80012be <HAL_TIM_SlaveConfigSynchro+0x4a>
 8001284:	2501      	movs	r5, #1
 8001286:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800128a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800128e:	f7ff ff9f 	bl	80011d0 <TIM_SlaveTimer_SetConfig>
 8001292:	b130      	cbz	r0, 80012a2 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8001294:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8001296:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800129a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800129e:	4628      	mov	r0, r5
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012aa:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012b2:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80012b4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80012bc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80012be:	4618      	mov	r0, r3
}
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080012c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80012c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012c8:	2b01      	cmp	r3, #1
{
 80012ca:	b530      	push	{r4, r5, lr}
 80012cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80012d0:	d035      	beq.n	800133e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80012d6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80012d8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80012da:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80012dc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80012e0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80012e2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80012e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012e8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80012ea:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80012ec:	4c15      	ldr	r4, [pc, #84]	; (8001344 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	d01a      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80012f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f6:	d017      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80012f8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80012fc:	42a3      	cmp	r3, r4
 80012fe:	d013      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001300:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001304:	42a3      	cmp	r3, r4
 8001306:	d00f      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001308:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800130c:	42a3      	cmp	r3, r4
 800130e:	d00b      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001310:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8001314:	42a3      	cmp	r3, r4
 8001316:	d007      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001318:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800131c:	42a3      	cmp	r3, r4
 800131e:	d003      	beq.n	8001328 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001320:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001324:	42a3      	cmp	r3, r4
 8001326:	d104      	bne.n	8001332 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001328:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800132a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800132e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001332:	2301      	movs	r3, #1
 8001334:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001338:	2300      	movs	r3, #0
 800133a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800133e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001340:	bd30      	pop	{r4, r5, pc}
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000

08001348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001348:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800134a:	6803      	ldr	r3, [r0, #0]
 800134c:	68c1      	ldr	r1, [r0, #12]
 800134e:	691a      	ldr	r2, [r3, #16]
{
 8001350:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001352:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001356:	430a      	orrs	r2, r1
 8001358:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800135a:	6925      	ldr	r5, [r4, #16]
 800135c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800135e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001360:	69c0      	ldr	r0, [r0, #28]
 8001362:	432a      	orrs	r2, r5
 8001364:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001366:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800136a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800136c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001370:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001372:	430a      	orrs	r2, r1
 8001374:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	69a1      	ldr	r1, [r4, #24]
 800137a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800137e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001380:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	4a25      	ldr	r2, [pc, #148]	; (800141c <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001388:	d129      	bne.n	80013de <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800138a:	4293      	cmp	r3, r2
 800138c:	d003      	beq.n	8001396 <UART_SetConfig+0x4e>
 800138e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001392:	4293      	cmp	r3, r2
 8001394:	d120      	bne.n	80013d8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001396:	f7ff fe81 	bl	800109c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800139a:	6862      	ldr	r2, [r4, #4]
 800139c:	6825      	ldr	r5, [r4, #0]
 800139e:	1892      	adds	r2, r2, r2
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	f04f 0119 	mov.w	r1, #25
 80013a8:	415b      	adcs	r3, r3
 80013aa:	fba0 0101 	umull	r0, r1, r0, r1
 80013ae:	f7fe ff0b 	bl	80001c8 <__aeabi_uldivmod>
 80013b2:	2164      	movs	r1, #100	; 0x64
 80013b4:	fbb0 f4f1 	udiv	r4, r0, r1
 80013b8:	fb01 0314 	mls	r3, r1, r4, r0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	3332      	adds	r3, #50	; 0x32
 80013c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c4:	f003 0207 	and.w	r2, r3, #7
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80013ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80013d2:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013d4:	60ab      	str	r3, [r5, #8]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80013d8:	f7ff fe50 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80013dc:	e7dd      	b.n	800139a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013de:	4293      	cmp	r3, r2
 80013e0:	d002      	beq.n	80013e8 <UART_SetConfig+0xa0>
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <UART_SetConfig+0xd8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d116      	bne.n	8001416 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80013e8:	f7ff fe58 	bl	800109c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013ec:	6863      	ldr	r3, [r4, #4]
 80013ee:	6825      	ldr	r5, [r4, #0]
 80013f0:	2119      	movs	r1, #25
 80013f2:	009a      	lsls	r2, r3, #2
 80013f4:	fba0 0101 	umull	r0, r1, r0, r1
 80013f8:	0f9b      	lsrs	r3, r3, #30
 80013fa:	f7fe fee5 	bl	80001c8 <__aeabi_uldivmod>
 80013fe:	2264      	movs	r2, #100	; 0x64
 8001400:	fbb0 f1f2 	udiv	r1, r0, r2
 8001404:	fb02 0311 	mls	r3, r2, r1, r0
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	3332      	adds	r3, #50	; 0x32
 800140c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001410:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001414:	e7de      	b.n	80013d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001416:	f7ff fe31 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 800141a:	e7e7      	b.n	80013ec <UART_SetConfig+0xa4>
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400

08001424 <HAL_UART_Init>:
{
 8001424:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001426:	4604      	mov	r4, r0
 8001428:	b340      	cbz	r0, 800147c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800142a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800142e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001432:	b91b      	cbnz	r3, 800143c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001434:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001438:	f000 f976 	bl	8001728 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800143c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800143e:	2324      	movs	r3, #36	; 0x24
 8001440:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001444:	68d3      	ldr	r3, [r2, #12]
 8001446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800144a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff ff7b 	bl	8001348 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800145a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001462:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800146a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800146e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001470:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001472:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001476:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800147a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
}
 800147e:	bd10      	pop	{r4, pc}

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b510      	push	{r4, lr}
 8001482:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001484:	2230      	movs	r2, #48	; 0x30
 8001486:	2100      	movs	r1, #0
 8001488:	a808      	add	r0, sp, #32
 800148a:	f000 f9eb 	bl	8001864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148e:	2100      	movs	r1, #0
 8001490:	2214      	movs	r2, #20
 8001492:	a803      	add	r0, sp, #12
 8001494:	f000 f9e6 	bl	8001864 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2400      	movs	r4, #0
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <SystemClock_Config+0x74>)
 800149c:	9401      	str	r4, [sp, #4]
 800149e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <SystemClock_Config+0x78>)
 80014b2:	9402      	str	r4, [sp, #8]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014be:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d2:	2310      	movs	r3, #16
 80014d4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f7ff fb61 	bl	8000b9c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014dc:	4621      	mov	r1, r4
 80014de:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e8:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ea:	f7ff fd2b 	bl	8000f44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80014ee:	b014      	add	sp, #80	; 0x50
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <main>:
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001500:	f7ff f80e 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8001504:	f7ff ffbc 	bl	8001480 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	2214      	movs	r2, #20
 800150a:	2100      	movs	r1, #0
 800150c:	eb0d 0002 	add.w	r0, sp, r2

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f000 f9a7 	bl	8001864 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b55      	ldr	r3, [pc, #340]	; (800166c <main+0x170>)
 8001518:	9401      	str	r4, [sp, #4]
 800151a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800151c:	4854      	ldr	r0, [pc, #336]	; (8001670 <main+0x174>)
  hadc1.Instance = ADC1;
 800151e:	4d55      	ldr	r5, [pc, #340]	; (8001674 <main+0x178>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001528:	f002 0201 	and.w	r2, r2, #1
 800152c:	9201      	str	r2, [sp, #4]
 800152e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	9402      	str	r4, [sp, #8]
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f042 0208 	orr.w	r2, r2, #8
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001540:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001544:	f44f 5180 	mov.w	r1, #4096	; 0x1000

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	9b02      	ldr	r3, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154c:	2710      	movs	r7, #16
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800154e:	f7ff fb19 	bl	8000b84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001556:	a905      	add	r1, sp, #20
 8001558:	4845      	ldr	r0, [pc, #276]	; (8001670 <main+0x174>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800155a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f7ff fa2f 	bl	80009c4 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	4621      	mov	r1, r4
 8001568:	463a      	mov	r2, r7
 800156a:	a805      	add	r0, sp, #20
 800156c:	f000 f97a 	bl	8001864 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001570:	4a41      	ldr	r2, [pc, #260]	; (8001678 <main+0x17c>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001572:	762e      	strb	r6, [r5, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <main+0x180>)
 8001580:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8001582:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001584:	616e      	str	r6, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001586:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001588:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158a:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158e:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001590:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001592:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001596:	f7ff f803 	bl	80005a0 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800159a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	a905      	add	r1, sp, #20
 800159e:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 80015a0:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015a2:	9307      	str	r3, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015a4:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a6:	f7ff f91b 	bl	80007e0 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 80015aa:	4835      	ldr	r0, [pc, #212]	; (8001680 <main+0x184>)
  huart2.Init.BaudRate = 115200;
 80015ac:	4935      	ldr	r1, [pc, #212]	; (8001684 <main+0x188>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80015b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015b4:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	230c      	movs	r3, #12
 80015ba:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015be:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c4:	f7ff ff2e 	bl	8001424 <HAL_UART_Init>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015c8:	2214      	movs	r2, #20
  htim2.Instance = TIM2;
 80015ca:	4e2f      	ldr	r6, [pc, #188]	; (8001688 <main+0x18c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015cc:	eb0d 0002 	add.w	r0, sp, r2
 80015d0:	4621      	mov	r1, r4
 80015d2:	f000 f947 	bl	8001864 <memset>
  htim2.Init.Prescaler = 420;
 80015d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015da:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015de:	e886 0009 	stmia.w	r6, {r0, r3}
  htim2.Init.Period = 49;
 80015e2:	2331      	movs	r3, #49	; 0x31
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e4:	4630      	mov	r0, r6
  htim2.Init.Period = 49;
 80015e6:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	9403      	str	r4, [sp, #12]
 80015ea:	9404      	str	r4, [sp, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f2:	f7ff fdc9 	bl	8001188 <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015f6:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80015f8:	a905      	add	r1, sp, #20
 80015fa:	4630      	mov	r0, r6
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80015fc:	9305      	str	r3, [sp, #20]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80015fe:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001600:	f7ff fe38 	bl	8001274 <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001604:	a903      	add	r1, sp, #12
 8001606:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160c:	f7ff fe5a 	bl	80012c4 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_ADC_Start(& hadc1);
 8001610:	4628      	mov	r0, r5
 8001612:	f7ff f86b 	bl	80006ec <HAL_ADC_Start>
  while(!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)){};
 8001616:	682a      	ldr	r2, [r5, #0]
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	079b      	lsls	r3, r3, #30
 800161c:	d5fc      	bpl.n	8001618 <main+0x11c>
  AD_value= HAL_ADC_GetValue(& hadc1) ;
 800161e:	4815      	ldr	r0, [pc, #84]	; (8001674 <main+0x178>)
  TemperatureC=((AD_value-943)/3)+25;
 8001620:	4c1a      	ldr	r4, [pc, #104]	; (800168c <main+0x190>)
  AD_value= HAL_ADC_GetValue(& hadc1) ;
 8001622:	f7ff f8d9 	bl	80007d8 <HAL_ADC_GetValue>
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <main+0x194>)
 8001628:	8018      	strh	r0, [r3, #0]
  TemperatureC=((AD_value-943)/3)+25;
 800162a:	b280      	uxth	r0, r0
 800162c:	2203      	movs	r2, #3
 800162e:	f2a0 30af 	subw	r0, r0, #943	; 0x3af
 8001632:	fb90 f0f2 	sdiv	r0, r0, r2
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001636:	682a      	ldr	r2, [r5, #0]
	   		  HAL_GPIO_WritePin(GPIOD,  GPIO_PIN_12, GPIO_PIN_SET);
 8001638:	4d0d      	ldr	r5, [pc, #52]	; (8001670 <main+0x174>)
  TemperatureC=((AD_value-943)/3)+25;
 800163a:	3019      	adds	r0, #25
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 800163c:	f06f 0102 	mvn.w	r1, #2
  TemperatureC=((AD_value-943)/3)+25;
 8001640:	8020      	strh	r0, [r4, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001642:	6011      	str	r1, [r2, #0]
	  if (TemperatureC > 37 )
 8001644:	8823      	ldrh	r3, [r4, #0]
 8001646:	2b25      	cmp	r3, #37	; 0x25
 8001648:	d908      	bls.n	800165c <main+0x160>
	   		  HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 800164a:	4628      	mov	r0, r5
 800164c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001650:	f7ff fa9d 	bl	8000b8e <HAL_GPIO_TogglePin>
	   		HAL_Delay(100);
 8001654:	2064      	movs	r0, #100	; 0x64
 8001656:	f7fe ff8f 	bl	8000578 <HAL_Delay>
 800165a:	e7f3      	b.n	8001644 <main+0x148>
	   		  HAL_GPIO_WritePin(GPIOD,  GPIO_PIN_12, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	4628      	mov	r0, r5
 8001664:	f7ff fa8e 	bl	8000b84 <HAL_GPIO_WritePin>
 8001668:	e7ec      	b.n	8001644 <main+0x148>
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	2000003c 	.word	0x2000003c
 8001678:	40012000 	.word	0x40012000
 800167c:	0f000001 	.word	0x0f000001
 8001680:	200000c4 	.word	0x200000c4
 8001684:	40004400 	.word	0x40004400
 8001688:	20000084 	.word	0x20000084
 800168c:	20000034 	.word	0x20000034
 8001690:	2000002c 	.word	0x2000002c

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_MspInit+0x34>)
 8001698:	2100      	movs	r1, #0
 800169a:	9100      	str	r1, [sp, #0]
 800169c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800169e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
 80016a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	9101      	str	r1, [sp, #4]
 80016b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	b002      	add	sp, #8
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80016cc:	6802      	ldr	r2, [r0, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_ADC_MspInit+0x28>)
 80016d0:	429a      	cmp	r2, r3
{
 80016d2:	b082      	sub	sp, #8
  if(hadc->Instance==ADC1)
 80016d4:	d10b      	bne.n	80016ee <HAL_ADC_MspInit+0x22>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_ADC_MspInit+0x2c>)
 80016dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ee:	b002      	add	sp, #8
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40012000 	.word	0x40012000
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80016fc:	6803      	ldr	r3, [r0, #0]
 80016fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001702:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001704:	d10b      	bne.n	800171e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_TIM_Base_MspInit+0x28>)
 800170c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800171e:	b002      	add	sp, #8
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b510      	push	{r4, lr}
 800172a:	4604      	mov	r4, r0
 800172c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	2214      	movs	r2, #20
 8001730:	2100      	movs	r1, #0
 8001732:	a803      	add	r0, sp, #12
 8001734:	f000 f896 	bl	8001864 <memset>
  if(huart->Instance==USART2)
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_UART_MspInit+0x68>)
 800173c:	429a      	cmp	r2, r3
 800173e:	d124      	bne.n	800178a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001740:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001744:	2100      	movs	r1, #0
 8001746:	9101      	str	r1, [sp, #4]
 8001748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800174c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
 8001752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001754:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001758:	9201      	str	r2, [sp, #4]
 800175a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	9102      	str	r1, [sp, #8]
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001770:	230c      	movs	r3, #12
 8001772:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	2301      	movs	r3, #1
 800177a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001782:	2307      	movs	r3, #7
 8001784:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f7ff f91d 	bl	80009c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178a:	b008      	add	sp, #32
 800178c:	bd10      	pop	{r4, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400
 8001794:	40020000 	.word	0x40020000

08001798 <NMI_Handler>:
 8001798:	4770      	bx	lr

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	e7fe      	b.n	800179a <HardFault_Handler>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	e7fe      	b.n	800179c <MemManage_Handler>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	e7fe      	b.n	800179e <BusFault_Handler>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler>

080017a2 <SVC_Handler>:
 80017a2:	4770      	bx	lr

080017a4 <DebugMon_Handler>:
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f7fe bed4 	b.w	8000554 <HAL_IncTick>

080017ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SystemInit+0x18>)
 80017ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80017b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ce:	e003      	b.n	80017d8 <LoopCopyDataInit>

080017d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d6:	3104      	adds	r1, #4

080017d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017e0:	d3f6      	bcc.n	80017d0 <CopyDataInit>
  ldr  r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017e4:	e002      	b.n	80017ec <LoopFillZerobss>

080017e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e8:	f842 3b04 	str.w	r3, [r2], #4

080017ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017f0:	d3f9      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffdb 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f000 f811 	bl	800181c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fe7f 	bl	80014fc <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001804:	080018b4 	.word	0x080018b4
  ldr  r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800180c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001810:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001814:	20000108 	.word	0x20000108

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <__libc_init_array>:
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4e0d      	ldr	r6, [pc, #52]	; (8001854 <__libc_init_array+0x38>)
 8001820:	4c0d      	ldr	r4, [pc, #52]	; (8001858 <__libc_init_array+0x3c>)
 8001822:	1ba4      	subs	r4, r4, r6
 8001824:	10a4      	asrs	r4, r4, #2
 8001826:	2500      	movs	r5, #0
 8001828:	42a5      	cmp	r5, r4
 800182a:	d109      	bne.n	8001840 <__libc_init_array+0x24>
 800182c:	4e0b      	ldr	r6, [pc, #44]	; (800185c <__libc_init_array+0x40>)
 800182e:	4c0c      	ldr	r4, [pc, #48]	; (8001860 <__libc_init_array+0x44>)
 8001830:	f000 f820 	bl	8001874 <_init>
 8001834:	1ba4      	subs	r4, r4, r6
 8001836:	10a4      	asrs	r4, r4, #2
 8001838:	2500      	movs	r5, #0
 800183a:	42a5      	cmp	r5, r4
 800183c:	d105      	bne.n	800184a <__libc_init_array+0x2e>
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001844:	4798      	blx	r3
 8001846:	3501      	adds	r5, #1
 8001848:	e7ee      	b.n	8001828 <__libc_init_array+0xc>
 800184a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800184e:	4798      	blx	r3
 8001850:	3501      	adds	r5, #1
 8001852:	e7f2      	b.n	800183a <__libc_init_array+0x1e>
 8001854:	080018ac 	.word	0x080018ac
 8001858:	080018ac 	.word	0x080018ac
 800185c:	080018ac 	.word	0x080018ac
 8001860:	080018b0 	.word	0x080018b0

08001864 <memset>:
 8001864:	4402      	add	r2, r0
 8001866:	4603      	mov	r3, r0
 8001868:	4293      	cmp	r3, r2
 800186a:	d100      	bne.n	800186e <memset+0xa>
 800186c:	4770      	bx	lr
 800186e:	f803 1b01 	strb.w	r1, [r3], #1
 8001872:	e7f9      	b.n	8001868 <memset+0x4>

08001874 <_init>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr

08001880 <_fini>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr
