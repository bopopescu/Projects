
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001b20  08001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b88  08001b88  00011b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b8c  08001b8c  00011b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000d28  20000010  08001ba0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000d38  08001ba0  00020d38  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cba8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021b4  00000000  00000000  0002cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fab  00000000  00000000  0002ed9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008e0  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a50  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004442  00000000  00000000  00034078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003c0e  00000000  00000000  000384ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c0c8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000015cc  00000000  00000000  0003c144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001b08 	.word	0x08001b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08001b08 	.word	0x08001b08

080001d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <HAL_InitTick+0x40>)
{
 80001d4:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	b908      	cbnz	r0, 80001de <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80001da:	2001      	movs	r0, #1
 80001dc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <HAL_InitTick+0x44>)
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e8:	6810      	ldr	r0, [r2, #0]
 80001ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ee:	f000 f883 	bl	80002f8 <HAL_SYSTICK_Config>
 80001f2:	4604      	mov	r4, r0
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d1f0      	bne.n	80001da <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f8:	2d0f      	cmp	r5, #15
 80001fa:	d8ee      	bhi.n	80001da <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001fc:	4602      	mov	r2, r0
 80001fe:	4629      	mov	r1, r5
 8000200:	f04f 30ff 	mov.w	r0, #4294967295
 8000204:	f000 f844 	bl	8000290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <HAL_InitTick+0x48>)
 800020a:	4620      	mov	r0, r4
 800020c:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	2000000c 	.word	0x2000000c
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <HAL_Init+0x28>)
 800021e:	6813      	ldr	r3, [r2, #0]
 8000220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000224:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000226:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022a:	f000 f81f 	bl	800026c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800022e:	200f      	movs	r0, #15
 8000230:	f7ff ffce 	bl	80001d0 <HAL_InitTick>
 8000234:	4604      	mov	r4, r0
 8000236:	b918      	cbnz	r0, 8000240 <HAL_Init+0x24>
    HAL_MspInit();
 8000238:	f001 fbba 	bl	80019b0 <HAL_MspInit>
}
 800023c:	4620      	mov	r0, r4
 800023e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000240:	2401      	movs	r4, #1
 8000242:	e7fb      	b.n	800023c <HAL_Init+0x20>
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000248:	4a03      	ldr	r2, [pc, #12]	; (8000258 <HAL_IncTick+0x10>)
 800024a:	4904      	ldr	r1, [pc, #16]	; (800025c <HAL_IncTick+0x14>)
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	6809      	ldr	r1, [r1, #0]
 8000250:	440b      	add	r3, r1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000d30 	.word	0x20000d30
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000260:	4b01      	ldr	r3, [pc, #4]	; (8000268 <HAL_GetTick+0x8>)
 8000262:	6818      	ldr	r0, [r3, #0]
}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000d30 	.word	0x20000d30

0800026c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800026e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000270:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000274:	041b      	lsls	r3, r3, #16
 8000276:	0c1b      	lsrs	r3, r3, #16
 8000278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800027c:	0200      	lsls	r0, r0, #8
 800027e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000282:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000286:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000288:	60d3      	str	r3, [r2, #12]
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000292:	b530      	push	{r4, r5, lr}
 8000294:	68dc      	ldr	r4, [r3, #12]
 8000296:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800029a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a0:	2b04      	cmp	r3, #4
 80002a2:	bf28      	it	cs
 80002a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 0501 	mov.w	r5, #1
 80002ac:	fa05 f303 	lsl.w	r3, r5, r3
 80002b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b4:	bf8c      	ite	hi
 80002b6:	3c03      	subhi	r4, #3
 80002b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ba:	4019      	ands	r1, r3
 80002bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002be:	fa05 f404 	lsl.w	r4, r5, r4
 80002c2:	3c01      	subs	r4, #1
 80002c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80002c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	ea42 0201 	orr.w	r2, r2, r1
 80002cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	bfad      	iteet	ge
 80002d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	f000 000f 	andlt.w	r0, r0, #15
 80002da:	4b06      	ldrlt	r3, [pc, #24]	; (80002f4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	bfb5      	itete	lt
 80002e2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000ed14 	.word	0xe000ed14

080002f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f8:	3801      	subs	r0, #1
 80002fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002fe:	d20a      	bcs.n	8000316 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	21f0      	movs	r1, #240	; 0xf0
 8000308:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800030c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000310:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000316:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e010 	.word	0xe000e010
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000328:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800032a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800032c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80004d8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000330:	4c67      	ldr	r4, [pc, #412]	; (80004d0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000332:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000334:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000336:	9a01      	ldr	r2, [sp, #4]
 8000338:	40da      	lsrs	r2, r3
 800033a:	d102      	bne.n	8000342 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800033c:	b005      	add	sp, #20
 800033e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000342:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000344:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000346:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000348:	ea12 0e06 	ands.w	lr, r2, r6
 800034c:	f000 80b1 	beq.w	80004b2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000350:	684a      	ldr	r2, [r1, #4]
 8000352:	f022 0710 	bic.w	r7, r2, #16
 8000356:	2f02      	cmp	r7, #2
 8000358:	d116      	bne.n	8000388 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800035a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800035e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000362:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000366:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800036a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800036e:	f04f 0c0f 	mov.w	ip, #15
 8000372:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000376:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800037a:	690d      	ldr	r5, [r1, #16]
 800037c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000380:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000384:	f8c9 5020 	str.w	r5, [r9, #32]
 8000388:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800038c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800038e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000392:	fa05 f50c 	lsl.w	r5, r5, ip
 8000396:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000398:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800039c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003a0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003a6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003aa:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003ac:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b0:	d811      	bhi.n	80003d6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80003b4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80003b8:	68cf      	ldr	r7, [r1, #12]
 80003ba:	fa07 f70c 	lsl.w	r7, r7, ip
 80003be:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80003c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80003c6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80003ca:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80003ce:	409f      	lsls	r7, r3
 80003d0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80003d4:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80003d6:	f1ba 0f03 	cmp.w	sl, #3
 80003da:	d107      	bne.n	80003ec <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80003dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80003de:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80003e2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80003e6:	409f      	lsls	r7, r3
 80003e8:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80003ea:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80003ec:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80003ee:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80003f0:	688e      	ldr	r6, [r1, #8]
 80003f2:	fa06 f60c 	lsl.w	r6, r6, ip
 80003f6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80003f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003fa:	00d5      	lsls	r5, r2, #3
 80003fc:	d559      	bpl.n	80004b2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000402:	f045 0501 	orr.w	r5, r5, #1
 8000406:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800040a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800040e:	f023 0603 	bic.w	r6, r3, #3
 8000412:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000416:	f005 0501 	and.w	r5, r5, #1
 800041a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800041e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000420:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000426:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000428:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800042c:	270f      	movs	r7, #15
 800042e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000432:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000436:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800043a:	d03c      	beq.n	80004b6 <HAL_GPIO_Init+0x192>
 800043c:	4d25      	ldr	r5, [pc, #148]	; (80004d4 <HAL_GPIO_Init+0x1b0>)
 800043e:	42a8      	cmp	r0, r5
 8000440:	d03b      	beq.n	80004ba <HAL_GPIO_Init+0x196>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d039      	beq.n	80004be <HAL_GPIO_Init+0x19a>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	d037      	beq.n	80004c2 <HAL_GPIO_Init+0x19e>
 8000452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000456:	42a8      	cmp	r0, r5
 8000458:	d035      	beq.n	80004c6 <HAL_GPIO_Init+0x1a2>
 800045a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045e:	42a8      	cmp	r0, r5
 8000460:	d033      	beq.n	80004ca <HAL_GPIO_Init+0x1a6>
 8000462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000466:	42a8      	cmp	r0, r5
 8000468:	bf14      	ite	ne
 800046a:	2507      	movne	r5, #7
 800046c:	2506      	moveq	r5, #6
 800046e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000472:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000474:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000476:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000478:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800047c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800047e:	bf54      	ite	pl
 8000480:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000482:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000486:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000488:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 800048c:	bf54      	ite	pl
 800048e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000490:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000494:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000496:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000498:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800049a:	bf54      	ite	pl
 800049c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800049e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80004a2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80004a4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80004a8:	bf54      	ite	pl
 80004aa:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80004ac:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80004b0:	60e5      	str	r5, [r4, #12]
    position++;
 80004b2:	3301      	adds	r3, #1
 80004b4:	e73f      	b.n	8000336 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004b6:	2500      	movs	r5, #0
 80004b8:	e7d9      	b.n	800046e <HAL_GPIO_Init+0x14a>
 80004ba:	2501      	movs	r5, #1
 80004bc:	e7d7      	b.n	800046e <HAL_GPIO_Init+0x14a>
 80004be:	2502      	movs	r5, #2
 80004c0:	e7d5      	b.n	800046e <HAL_GPIO_Init+0x14a>
 80004c2:	2503      	movs	r5, #3
 80004c4:	e7d3      	b.n	800046e <HAL_GPIO_Init+0x14a>
 80004c6:	2504      	movs	r5, #4
 80004c8:	e7d1      	b.n	800046e <HAL_GPIO_Init+0x14a>
 80004ca:	2505      	movs	r5, #5
 80004cc:	e7cf      	b.n	800046e <HAL_GPIO_Init+0x14a>
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400
 80004d4:	48000400 	.word	0x48000400
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004dc:	b10a      	cbz	r2, 80004e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004de:	6181      	str	r1, [r0, #24]
 80004e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004e2:	6281      	str	r1, [r0, #40]	; 0x28
 80004e4:	4770      	bx	lr
	...

080004e8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_PWREx_GetVoltageRange+0xc>)
 80004ea:	6818      	ldr	r0, [r3, #0]
#endif
}
 80004ec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40007000 	.word	0x40007000

080004f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80004fa:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80004fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000500:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000504:	d11c      	bne.n	8000540 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000506:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800050a:	d015      	beq.n	8000538 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000516:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <HAL_PWREx_ControlVoltageScaling+0x64>)
 800051a:	6811      	ldr	r1, [r2, #0]
 800051c:	2232      	movs	r2, #50	; 0x32
 800051e:	434a      	muls	r2, r1
 8000520:	490f      	ldr	r1, [pc, #60]	; (8000560 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000522:	fbb2 f2f1 	udiv	r2, r2, r1
 8000526:	4619      	mov	r1, r3
 8000528:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800052a:	6958      	ldr	r0, [r3, #20]
 800052c:	0540      	lsls	r0, r0, #21
 800052e:	d500      	bpl.n	8000532 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000530:	b922      	cbnz	r2, 800053c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000532:	694b      	ldr	r3, [r1, #20]
 8000534:	055b      	lsls	r3, r3, #21
 8000536:	d40d      	bmi.n	8000554 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000538:	2000      	movs	r0, #0
 800053a:	4770      	bx	lr
        wait_loop_index--;
 800053c:	3a01      	subs	r2, #1
 800053e:	e7f4      	b.n	800052a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000540:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000544:	bf1f      	itttt	ne
 8000546:	681a      	ldrne	r2, [r3, #0]
 8000548:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800054c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000550:	601a      	strne	r2, [r3, #0]
 8000552:	e7f1      	b.n	8000538 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000554:	2003      	movs	r0, #3
}
 8000556:	4770      	bx	lr
 8000558:	40007000 	.word	0x40007000
 800055c:	2000000c 	.word	0x2000000c
 8000560:	000f4240 	.word	0x000f4240

08000564 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000564:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000566:	4d1e      	ldr	r5, [pc, #120]	; (80005e0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000568:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800056a:	00da      	lsls	r2, r3, #3
{
 800056c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800056e:	d518      	bpl.n	80005a2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000570:	f7ff ffba 	bl	80004e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000574:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000578:	d123      	bne.n	80005c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800057a:	2c80      	cmp	r4, #128	; 0x80
 800057c:	d929      	bls.n	80005d2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800057e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000580:	bf8c      	ite	hi
 8000582:	2002      	movhi	r0, #2
 8000584:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000586:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000588:	6813      	ldr	r3, [r2, #0]
 800058a:	f023 0307 	bic.w	r3, r3, #7
 800058e:	4303      	orrs	r3, r0
 8000590:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000592:	6813      	ldr	r3, [r2, #0]
 8000594:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000598:	1a18      	subs	r0, r3, r0
 800059a:	bf18      	it	ne
 800059c:	2001      	movne	r0, #1
 800059e:	b003      	add	sp, #12
 80005a0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	65ab      	str	r3, [r5, #88]	; 0x58
 80005aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80005b4:	f7ff ff98 	bl	80004e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80005b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80005ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80005be:	65ab      	str	r3, [r5, #88]	; 0x58
 80005c0:	e7d8      	b.n	8000574 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80005c2:	2c80      	cmp	r4, #128	; 0x80
 80005c4:	d807      	bhi.n	80005d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80005c6:	d008      	beq.n	80005da <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80005c8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80005cc:	4258      	negs	r0, r3
 80005ce:	4158      	adcs	r0, r3
 80005d0:	e7d9      	b.n	8000586 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80005d2:	2000      	movs	r0, #0
 80005d4:	e7d7      	b.n	8000586 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80005d6:	2003      	movs	r0, #3
 80005d8:	e7d5      	b.n	8000586 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80005da:	2002      	movs	r0, #2
 80005dc:	e7d3      	b.n	8000586 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <HAL_RCC_GetSysClockFreq+0x8c>)
 80005ea:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80005ec:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80005ee:	f012 020c 	ands.w	r2, r2, #12
 80005f2:	d005      	beq.n	8000600 <HAL_RCC_GetSysClockFreq+0x18>
 80005f4:	2a0c      	cmp	r2, #12
 80005f6:	d115      	bne.n	8000624 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80005f8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80005fc:	2901      	cmp	r1, #1
 80005fe:	d118      	bne.n	8000632 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000600:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000602:	481d      	ldr	r0, [pc, #116]	; (8000678 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000604:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000606:	bf55      	itete	pl
 8000608:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800060c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800060e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000612:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000616:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800061a:	b34a      	cbz	r2, 8000670 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800061c:	2a0c      	cmp	r2, #12
 800061e:	d009      	beq.n	8000634 <HAL_RCC_GetSysClockFreq+0x4c>
 8000620:	2000      	movs	r0, #0
  return sysclockfreq;
 8000622:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000624:	2a04      	cmp	r2, #4
 8000626:	d022      	beq.n	800066e <HAL_RCC_GetSysClockFreq+0x86>
 8000628:	2a08      	cmp	r2, #8
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <HAL_RCC_GetSysClockFreq+0x94>)
 800062c:	bf18      	it	ne
 800062e:	2000      	movne	r0, #0
 8000630:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000632:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000634:	68da      	ldr	r2, [r3, #12]
 8000636:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800063a:	2a02      	cmp	r2, #2
 800063c:	d015      	beq.n	800066a <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 800063e:	490f      	ldr	r1, [pc, #60]	; (800067c <HAL_RCC_GetSysClockFreq+0x94>)
 8000640:	2a03      	cmp	r2, #3
 8000642:	bf08      	it	eq
 8000644:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000646:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000648:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000650:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000654:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000658:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800065a:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800065c:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800065e:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000660:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000664:	fbb0 f0f3 	udiv	r0, r0, r3
 8000668:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <HAL_RCC_GetSysClockFreq+0x98>)
 800066c:	e7eb      	b.n	8000646 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	08001b58 	.word	0x08001b58
 800067c:	007a1200 	.word	0x007a1200
 8000680:	00f42400 	.word	0x00f42400

08000684 <HAL_RCC_OscConfig>:
{
 8000684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000688:	4605      	mov	r5, r0
 800068a:	b908      	cbnz	r0, 8000690 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
 800068e:	e047      	b.n	8000720 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000690:	4ca6      	ldr	r4, [pc, #664]	; (800092c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000692:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000694:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000696:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000698:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800069a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800069e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80006a2:	d573      	bpl.n	800078c <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80006a4:	b11e      	cbz	r6, 80006ae <HAL_RCC_OscConfig+0x2a>
 80006a6:	2e0c      	cmp	r6, #12
 80006a8:	d152      	bne.n	8000750 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80006aa:	2f01      	cmp	r7, #1
 80006ac:	d150      	bne.n	8000750 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	0798      	lsls	r0, r3, #30
 80006b2:	d502      	bpl.n	80006ba <HAL_RCC_OscConfig+0x36>
 80006b4:	69ab      	ldr	r3, [r5, #24]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0e8      	beq.n	800068c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	6a28      	ldr	r0, [r5, #32]
 80006be:	0719      	lsls	r1, r3, #28
 80006c0:	bf56      	itet	pl
 80006c2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80006c6:	6823      	ldrmi	r3, [r4, #0]
 80006c8:	091b      	lsrpl	r3, r3, #4
 80006ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006ce:	4283      	cmp	r3, r0
 80006d0:	d229      	bcs.n	8000726 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80006d2:	f7ff ff47 	bl	8000564 <RCC_SetFlashLatencyFromMSIRange>
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d1d8      	bne.n	800068c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6023      	str	r3, [r4, #0]
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	6a2a      	ldr	r2, [r5, #32]
 80006e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006ea:	4313      	orrs	r3, r2
 80006ec:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006ee:	6863      	ldr	r3, [r4, #4]
 80006f0:	69ea      	ldr	r2, [r5, #28]
 80006f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80006f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80006fa:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80006fc:	f7ff ff74 	bl	80005e8 <HAL_RCC_GetSysClockFreq>
 8000700:	68a3      	ldr	r3, [r4, #8]
 8000702:	4a8b      	ldr	r2, [pc, #556]	; (8000930 <HAL_RCC_OscConfig+0x2ac>)
 8000704:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	f003 031f 	and.w	r3, r3, #31
 800070e:	40d8      	lsrs	r0, r3
 8000710:	4b88      	ldr	r3, [pc, #544]	; (8000934 <HAL_RCC_OscConfig+0x2b0>)
 8000712:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000714:	4b88      	ldr	r3, [pc, #544]	; (8000938 <HAL_RCC_OscConfig+0x2b4>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	f7ff fd5a 	bl	80001d0 <HAL_InitTick>
        if(status != HAL_OK)
 800071c:	2800      	cmp	r0, #0
 800071e:	d035      	beq.n	800078c <HAL_RCC_OscConfig+0x108>
}
 8000720:	b003      	add	sp, #12
 8000722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000734:	4303      	orrs	r3, r0
 8000736:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000738:	6863      	ldr	r3, [r4, #4]
 800073a:	69ea      	ldr	r2, [r5, #28]
 800073c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000744:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000746:	f7ff ff0d 	bl	8000564 <RCC_SetFlashLatencyFromMSIRange>
 800074a:	2800      	cmp	r0, #0
 800074c:	d0d6      	beq.n	80006fc <HAL_RCC_OscConfig+0x78>
 800074e:	e79d      	b.n	800068c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000750:	69ab      	ldr	r3, [r5, #24]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d036      	beq.n	80007c4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800075e:	f7ff fd7f 	bl	8000260 <HAL_GetTick>
 8000762:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	079a      	lsls	r2, r3, #30
 8000768:	d524      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6023      	str	r3, [r4, #0]
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	6a2a      	ldr	r2, [r5, #32]
 8000776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800077a:	4313      	orrs	r3, r2
 800077c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800077e:	6863      	ldr	r3, [r4, #4]
 8000780:	69ea      	ldr	r2, [r5, #28]
 8000782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000786:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800078a:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800078c:	682b      	ldr	r3, [r5, #0]
 800078e:	07d8      	lsls	r0, r3, #31
 8000790:	d429      	bmi.n	80007e6 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000792:	682b      	ldr	r3, [r5, #0]
 8000794:	0799      	lsls	r1, r3, #30
 8000796:	d467      	bmi.n	8000868 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000798:	682b      	ldr	r3, [r5, #0]
 800079a:	0718      	lsls	r0, r3, #28
 800079c:	f100 809c 	bmi.w	80008d8 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	0759      	lsls	r1, r3, #29
 80007a4:	f100 80ca 	bmi.w	800093c <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80007a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80007aa:	2800      	cmp	r0, #0
 80007ac:	f040 8133 	bne.w	8000a16 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 80007b0:	2000      	movs	r0, #0
 80007b2:	e7b5      	b.n	8000720 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007b4:	f7ff fd54 	bl	8000260 <HAL_GetTick>
 80007b8:	eba0 0008 	sub.w	r0, r0, r8
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9d1      	bls.n	8000764 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 80007c0:	2003      	movs	r0, #3
 80007c2:	e7ad      	b.n	8000720 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	f023 0301 	bic.w	r3, r3, #1
 80007ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007cc:	f7ff fd48 	bl	8000260 <HAL_GetTick>
 80007d0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	079b      	lsls	r3, r3, #30
 80007d6:	d5d9      	bpl.n	800078c <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007d8:	f7ff fd42 	bl	8000260 <HAL_GetTick>
 80007dc:	eba0 0008 	sub.w	r0, r0, r8
 80007e0:	2802      	cmp	r0, #2
 80007e2:	d9f6      	bls.n	80007d2 <HAL_RCC_OscConfig+0x14e>
 80007e4:	e7ec      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80007e6:	2e08      	cmp	r6, #8
 80007e8:	d003      	beq.n	80007f2 <HAL_RCC_OscConfig+0x16e>
 80007ea:	2e0c      	cmp	r6, #12
 80007ec:	d108      	bne.n	8000800 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80007ee:	2f03      	cmp	r7, #3
 80007f0:	d106      	bne.n	8000800 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	039a      	lsls	r2, r3, #14
 80007f6:	d5cc      	bpl.n	8000792 <HAL_RCC_OscConfig+0x10e>
 80007f8:	686b      	ldr	r3, [r5, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1c9      	bne.n	8000792 <HAL_RCC_OscConfig+0x10e>
 80007fe:	e745      	b.n	800068c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000800:	686b      	ldr	r3, [r5, #4]
 8000802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000806:	d110      	bne.n	800082a <HAL_RCC_OscConfig+0x1a6>
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000810:	f7ff fd26 	bl	8000260 <HAL_GetTick>
 8000814:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	039b      	lsls	r3, r3, #14
 800081a:	d4ba      	bmi.n	8000792 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800081c:	f7ff fd20 	bl	8000260 <HAL_GetTick>
 8000820:	eba0 0008 	sub.w	r0, r0, r8
 8000824:	2864      	cmp	r0, #100	; 0x64
 8000826:	d9f6      	bls.n	8000816 <HAL_RCC_OscConfig+0x192>
 8000828:	e7ca      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800082a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800082e:	d104      	bne.n	800083a <HAL_RCC_OscConfig+0x1b6>
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000836:	6023      	str	r3, [r4, #0]
 8000838:	e7e6      	b.n	8000808 <HAL_RCC_OscConfig+0x184>
 800083a:	6822      	ldr	r2, [r4, #0]
 800083c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000840:	6022      	str	r2, [r4, #0]
 8000842:	6822      	ldr	r2, [r4, #0]
 8000844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000848:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1e0      	bne.n	8000810 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 800084e:	f7ff fd07 	bl	8000260 <HAL_GetTick>
 8000852:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	0398      	lsls	r0, r3, #14
 8000858:	d59b      	bpl.n	8000792 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800085a:	f7ff fd01 	bl	8000260 <HAL_GetTick>
 800085e:	eba0 0008 	sub.w	r0, r0, r8
 8000862:	2864      	cmp	r0, #100	; 0x64
 8000864:	d9f6      	bls.n	8000854 <HAL_RCC_OscConfig+0x1d0>
 8000866:	e7ab      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000868:	2e04      	cmp	r6, #4
 800086a:	d003      	beq.n	8000874 <HAL_RCC_OscConfig+0x1f0>
 800086c:	2e0c      	cmp	r6, #12
 800086e:	d110      	bne.n	8000892 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000870:	2f02      	cmp	r7, #2
 8000872:	d10e      	bne.n	8000892 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	0559      	lsls	r1, r3, #21
 8000878:	d503      	bpl.n	8000882 <HAL_RCC_OscConfig+0x1fe>
 800087a:	68eb      	ldr	r3, [r5, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	f43f af05 	beq.w	800068c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	692a      	ldr	r2, [r5, #16]
 8000886:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800088a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800088e:	6063      	str	r3, [r4, #4]
 8000890:	e782      	b.n	8000798 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000892:	68eb      	ldr	r3, [r5, #12]
 8000894:	b17b      	cbz	r3, 80008b6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800089e:	f7ff fcdf 	bl	8000260 <HAL_GetTick>
 80008a2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	055a      	lsls	r2, r3, #21
 80008a8:	d4eb      	bmi.n	8000882 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008aa:	f7ff fcd9 	bl	8000260 <HAL_GetTick>
 80008ae:	1bc0      	subs	r0, r0, r7
 80008b0:	2802      	cmp	r0, #2
 80008b2:	d9f7      	bls.n	80008a4 <HAL_RCC_OscConfig+0x220>
 80008b4:	e784      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008be:	f7ff fccf 	bl	8000260 <HAL_GetTick>
 80008c2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	055b      	lsls	r3, r3, #21
 80008c8:	f57f af66 	bpl.w	8000798 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008cc:	f7ff fcc8 	bl	8000260 <HAL_GetTick>
 80008d0:	1bc0      	subs	r0, r0, r7
 80008d2:	2802      	cmp	r0, #2
 80008d4:	d9f6      	bls.n	80008c4 <HAL_RCC_OscConfig+0x240>
 80008d6:	e773      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008d8:	696b      	ldr	r3, [r5, #20]
 80008da:	b19b      	cbz	r3, 8000904 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80008dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80008e8:	f7ff fcba 	bl	8000260 <HAL_GetTick>
 80008ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80008ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80008f2:	079a      	lsls	r2, r3, #30
 80008f4:	f53f af54 	bmi.w	80007a0 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008f8:	f7ff fcb2 	bl	8000260 <HAL_GetTick>
 80008fc:	1bc0      	subs	r0, r0, r7
 80008fe:	2802      	cmp	r0, #2
 8000900:	d9f5      	bls.n	80008ee <HAL_RCC_OscConfig+0x26a>
 8000902:	e75d      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8000904:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000910:	f7ff fca6 	bl	8000260 <HAL_GetTick>
 8000914:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000916:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800091a:	079b      	lsls	r3, r3, #30
 800091c:	f57f af40 	bpl.w	80007a0 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000920:	f7ff fc9e 	bl	8000260 <HAL_GetTick>
 8000924:	1bc0      	subs	r0, r0, r7
 8000926:	2802      	cmp	r0, #2
 8000928:	d9f5      	bls.n	8000916 <HAL_RCC_OscConfig+0x292>
 800092a:	e749      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
 800092c:	40021000 	.word	0x40021000
 8000930:	08001b45 	.word	0x08001b45
 8000934:	2000000c 	.word	0x2000000c
 8000938:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800093c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800093e:	00d8      	lsls	r0, r3, #3
 8000940:	d429      	bmi.n	8000996 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	65a3      	str	r3, [r4, #88]	; 0x58
 800094a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000954:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000958:	4f79      	ldr	r7, [pc, #484]	; (8000b40 <HAL_RCC_OscConfig+0x4bc>)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	05d9      	lsls	r1, r3, #23
 800095e:	d51d      	bpl.n	800099c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000960:	68ab      	ldr	r3, [r5, #8]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d12b      	bne.n	80009be <HAL_RCC_OscConfig+0x33a>
 8000966:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000972:	f7ff fc75 	bl	8000260 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000976:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800097a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800097c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000980:	079b      	lsls	r3, r3, #30
 8000982:	d542      	bpl.n	8000a0a <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8000984:	f1b8 0f00 	cmp.w	r8, #0
 8000988:	f43f af0e 	beq.w	80007a8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 800098c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800098e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000992:	65a3      	str	r3, [r4, #88]	; 0x58
 8000994:	e708      	b.n	80007a8 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8000996:	f04f 0800 	mov.w	r8, #0
 800099a:	e7dd      	b.n	8000958 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc5c 	bl	8000260 <HAL_GetTick>
 80009a8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	05da      	lsls	r2, r3, #23
 80009ae:	d4d7      	bmi.n	8000960 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009b0:	f7ff fc56 	bl	8000260 <HAL_GetTick>
 80009b4:	eba0 0009 	sub.w	r0, r0, r9
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x326>
 80009bc:	e700      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d106      	bne.n	80009d0 <HAL_RCC_OscConfig+0x34c>
 80009c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80009ce:	e7ca      	b.n	8000966 <HAL_RCC_OscConfig+0x2e2>
 80009d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80009d4:	f022 0201 	bic.w	r2, r2, #1
 80009d8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80009dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80009e0:	f022 0204 	bic.w	r2, r2, #4
 80009e4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1c2      	bne.n	8000972 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 80009ec:	f7ff fc38 	bl	8000260 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009f0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80009f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80009fa:	0798      	lsls	r0, r3, #30
 80009fc:	d5c2      	bpl.n	8000984 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009fe:	f7ff fc2f 	bl	8000260 <HAL_GetTick>
 8000a02:	1bc0      	subs	r0, r0, r7
 8000a04:	4548      	cmp	r0, r9
 8000a06:	d9f6      	bls.n	80009f6 <HAL_RCC_OscConfig+0x372>
 8000a08:	e6da      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a0a:	f7ff fc29 	bl	8000260 <HAL_GetTick>
 8000a0e:	1bc0      	subs	r0, r0, r7
 8000a10:	4548      	cmp	r0, r9
 8000a12:	d9b3      	bls.n	800097c <HAL_RCC_OscConfig+0x2f8>
 8000a14:	e6d4      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000a16:	2e0c      	cmp	r6, #12
 8000a18:	d05c      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8000a1a:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000a1c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a22:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000a24:	d13b      	bne.n	8000a9e <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8000a26:	f7ff fc1b 	bl	8000260 <HAL_GetTick>
 8000a2a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	0199      	lsls	r1, r3, #6
 8000a30:	d42f      	bmi.n	8000a92 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a32:	68e2      	ldr	r2, [r4, #12]
 8000a34:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <HAL_RCC_OscConfig+0x4c0>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a42:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000a44:	3a01      	subs	r2, #1
 8000a46:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000a4a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a4c:	0912      	lsrs	r2, r2, #4
 8000a4e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000a52:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000a54:	0852      	lsrs	r2, r2, #1
 8000a56:	3a01      	subs	r2, #1
 8000a58:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000a5c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000a5e:	0852      	lsrs	r2, r2, #1
 8000a60:	3a01      	subs	r2, #1
 8000a62:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000a66:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000a70:	68e3      	ldr	r3, [r4, #12]
 8000a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a76:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000a78:	f7ff fbf2 	bl	8000260 <HAL_GetTick>
 8000a7c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	019a      	lsls	r2, r3, #6
 8000a82:	f53f ae95 	bmi.w	80007b0 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a86:	f7ff fbeb 	bl	8000260 <HAL_GetTick>
 8000a8a:	1b40      	subs	r0, r0, r5
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x3fa>
 8000a90:	e696      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a92:	f7ff fbe5 	bl	8000260 <HAL_GetTick>
 8000a96:	1b80      	subs	r0, r0, r6
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d9c7      	bls.n	8000a2c <HAL_RCC_OscConfig+0x3a8>
 8000a9c:	e690      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000aa4:	bf02      	ittt	eq
 8000aa6:	68e3      	ldreq	r3, [r4, #12]
 8000aa8:	f023 0303 	biceq.w	r3, r3, #3
 8000aac:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000aae:	68e3      	ldr	r3, [r4, #12]
 8000ab0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000aba:	f7ff fbd1 	bl	8000260 <HAL_GetTick>
 8000abe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	019b      	lsls	r3, r3, #6
 8000ac4:	f57f ae74 	bpl.w	80007b0 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ac8:	f7ff fbca 	bl	8000260 <HAL_GetTick>
 8000acc:	1b40      	subs	r0, r0, r5
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9f6      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x43c>
 8000ad2:	e675      	b.n	80007c0 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ad4:	2801      	cmp	r0, #1
 8000ad6:	f43f ae23 	beq.w	8000720 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8000ada:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000adc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ade:	f003 0103 	and.w	r1, r3, #3
 8000ae2:	4291      	cmp	r1, r2
 8000ae4:	f47f add2 	bne.w	800068c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ae8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000aea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000aee:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000af0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000af4:	f47f adca 	bne.w	800068c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000af8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000afa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000afe:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000b02:	f47f adc3 	bne.w	800068c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b06:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000b08:	3a07      	subs	r2, #7
 8000b0a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8000b0e:	bf18      	it	ne
 8000b10:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b12:	4291      	cmp	r1, r2
 8000b14:	f47f adba 	bne.w	800068c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b18:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000b1a:	0852      	lsrs	r2, r2, #1
 8000b1c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000b20:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b22:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000b26:	f47f adb1 	bne.w	800068c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000b2a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000b2c:	0852      	lsrs	r2, r2, #1
 8000b2e:	3a01      	subs	r2, #1
 8000b30:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b34:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8000b38:	bf14      	ite	ne
 8000b3a:	2001      	movne	r0, #1
 8000b3c:	2000      	moveq	r0, #0
 8000b3e:	e5ef      	b.n	8000720 <HAL_RCC_OscConfig+0x9c>
 8000b40:	40007000 	.word	0x40007000
 8000b44:	f99d808c 	.word	0xf99d808c

08000b48 <HAL_RCC_ClockConfig>:
{
 8000b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000b4e:	4604      	mov	r4, r0
 8000b50:	b910      	cbnz	r0, 8000b58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
 8000b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b58:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <HAL_RCC_ClockConfig+0x118>)
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d32a      	bcc.n	8000bba <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	07d9      	lsls	r1, r3, #31
 8000b68:	d432      	bmi.n	8000bd0 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b6a:	6821      	ldr	r1, [r4, #0]
 8000b6c:	078a      	lsls	r2, r1, #30
 8000b6e:	d45c      	bmi.n	8000c2a <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b70:	4a3b      	ldr	r2, [pc, #236]	; (8000c60 <HAL_RCC_ClockConfig+0x118>)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	429e      	cmp	r6, r3
 8000b7a:	d35e      	bcc.n	8000c3a <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7c:	f011 0f04 	tst.w	r1, #4
 8000b80:	4d38      	ldr	r5, [pc, #224]	; (8000c64 <HAL_RCC_ClockConfig+0x11c>)
 8000b82:	d165      	bne.n	8000c50 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b84:	070b      	lsls	r3, r1, #28
 8000b86:	d506      	bpl.n	8000b96 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b88:	68ab      	ldr	r3, [r5, #8]
 8000b8a:	6922      	ldr	r2, [r4, #16]
 8000b8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b94:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b96:	f7ff fd27 	bl	80005e8 <HAL_RCC_GetSysClockFreq>
 8000b9a:	68ab      	ldr	r3, [r5, #8]
 8000b9c:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <HAL_RCC_ClockConfig+0x120>)
 8000b9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	f003 031f 	and.w	r3, r3, #31
 8000bac:	40d8      	lsrs	r0, r3
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <HAL_RCC_ClockConfig+0x124>)
 8000bb0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	f7ff bb0b 	b.w	80001d0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	f023 0307 	bic.w	r3, r3, #7
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d1c1      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000bce:	e7c9      	b.n	8000b64 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd0:	6862      	ldr	r2, [r4, #4]
 8000bd2:	4d24      	ldr	r5, [pc, #144]	; (8000c64 <HAL_RCC_ClockConfig+0x11c>)
 8000bd4:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000bd6:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd8:	d11b      	bne.n	8000c12 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000bda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bde:	d0b8      	beq.n	8000b52 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000be0:	68ab      	ldr	r3, [r5, #8]
 8000be2:	f023 0303 	bic.w	r3, r3, #3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000bea:	f7ff fb39 	bl	8000260 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bf2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bf4:	68ab      	ldr	r3, [r5, #8]
 8000bf6:	6862      	ldr	r2, [r4, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c00:	d0b3      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c02:	f7ff fb2d 	bl	8000260 <HAL_GetTick>
 8000c06:	1bc0      	subs	r0, r0, r7
 8000c08:	4540      	cmp	r0, r8
 8000c0a:	d9f3      	bls.n	8000bf4 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
}
 8000c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c12:	2a02      	cmp	r2, #2
 8000c14:	d102      	bne.n	8000c1c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c1a:	e7e0      	b.n	8000bde <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000c1c:	b912      	cbnz	r2, 8000c24 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c1e:	f013 0f02 	tst.w	r3, #2
 8000c22:	e7dc      	b.n	8000bde <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c24:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000c28:	e7d9      	b.n	8000bde <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_RCC_ClockConfig+0x11c>)
 8000c2c:	68a0      	ldr	r0, [r4, #8]
 8000c2e:	6893      	ldr	r3, [r2, #8]
 8000c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c34:	4303      	orrs	r3, r0
 8000c36:	6093      	str	r3, [r2, #8]
 8000c38:	e79a      	b.n	8000b70 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	f023 0307 	bic.w	r3, r3, #7
 8000c40:	4333      	orrs	r3, r6
 8000c42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c44:	6813      	ldr	r3, [r2, #0]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d181      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000c4e:	e795      	b.n	8000b7c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c50:	68ab      	ldr	r3, [r5, #8]
 8000c52:	68e2      	ldr	r2, [r4, #12]
 8000c54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60ab      	str	r3, [r5, #8]
 8000c5c:	e792      	b.n	8000b84 <HAL_RCC_ClockConfig+0x3c>
 8000c5e:	bf00      	nop
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	08001b45 	.word	0x08001b45
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	20000004 	.word	0x20000004

08000c74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000c74:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000c76:	f000 fc33 	bl	80014e0 <vTaskStartScheduler>
  
  return osOK;
}
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	bd08      	pop	{r3, pc}

08000c7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000c7e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c80:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000c84:	8a02      	ldrh	r2, [r0, #16]
{
 8000c86:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c88:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8000c8c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000c8e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8000c90:	bf14      	ite	ne
 8000c92:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000c94:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c96:	a803      	add	r0, sp, #12
 8000c98:	9001      	str	r0, [sp, #4]
 8000c9a:	9400      	str	r4, [sp, #0]
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f000 fb4f 	bl	8001340 <xTaskCreate>
 8000ca2:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000ca4:	bf0c      	ite	eq
 8000ca6:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8000ca8:	2000      	movne	r0, #0
}
 8000caa:	b005      	add	sp, #20
 8000cac:	bd30      	pop	{r4, r5, pc}

08000cae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000cae:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2001      	moveq	r0, #1
 8000cb6:	f000 fd61 	bl	800177c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000cba:	2000      	movs	r0, #0
 8000cbc:	bd08      	pop	{r3, pc}

08000cbe <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cbe:	f100 0308 	add.w	r3, r0, #8
 8000cc2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cc8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ccc:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cce:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000cd0:	6003      	str	r3, [r0, #0]
 8000cd2:	4770      	bx	lr

08000cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6103      	str	r3, [r0, #16]
 8000cd8:	4770      	bx	lr

08000cda <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000cda:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000cdc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000ce6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000ce8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000cea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000cec:	3301      	adds	r3, #1
 8000cee:	6003      	str	r3, [r0, #0]
 8000cf0:	4770      	bx	lr

08000cf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000cf2:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000cf4:	1c53      	adds	r3, r2, #1
{
 8000cf6:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8000cf8:	d10a      	bne.n	8000d10 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000cfa:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000d00:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000d02:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000d04:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000d06:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000d08:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	6003      	str	r3, [r0, #0]
 8000d0e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d10:	f100 0308 	add.w	r3, r0, #8
 8000d14:	685c      	ldr	r4, [r3, #4]
 8000d16:	6825      	ldr	r5, [r4, #0]
 8000d18:	42aa      	cmp	r2, r5
 8000d1a:	d3ef      	bcc.n	8000cfc <vListInsert+0xa>
 8000d1c:	4623      	mov	r3, r4
 8000d1e:	e7f9      	b.n	8000d14 <vListInsert+0x22>

08000d20 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d20:	6841      	ldr	r1, [r0, #4]
 8000d22:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000d24:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d26:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d28:	6882      	ldr	r2, [r0, #8]
 8000d2a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000d2c:	6859      	ldr	r1, [r3, #4]
 8000d2e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d30:	bf08      	it	eq
 8000d32:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000d34:	2200      	movs	r2, #0
 8000d36:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000d3e:	6818      	ldr	r0, [r3, #0]
}
 8000d40:	4770      	bx	lr
	...

08000d44 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d44:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <prvTaskExitError+0x3c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	d008      	beq.n	8000d64 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	e7fe      	b.n	8000d62 <prvTaskExitError+0x1e>
 8000d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d68:	f383 8811 	msr	BASEPRI, r3
 8000d6c:	f3bf 8f6f 	isb	sy
 8000d70:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d74:	9b01      	ldr	r3, [sp, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0fc      	beq.n	8000d74 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d7a:	b002      	add	sp, #8
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <prvPortStartFirstTask+0x24>)
 8000d86:	6800      	ldr	r0, [r0, #0]
 8000d88:	6800      	ldr	r0, [r0, #0]
 8000d8a:	f380 8808 	msr	MSP, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	f380 8814 	msr	CONTROL, r0
 8000d96:	b662      	cpsie	i
 8000d98:	b661      	cpsie	f
 8000d9a:	f3bf 8f4f 	dsb	sy
 8000d9e:	f3bf 8f6f 	isb	sy
 8000da2:	df00      	svc	0
 8000da4:	bf00      	nop
 8000da6:	0000      	.short	0x0000
 8000da8:	e000ed08 	.word	0xe000ed08

08000dac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000dac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000dbc <vPortEnableVFP+0x10>
 8000db0:	6801      	ldr	r1, [r0, #0]
 8000db2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000db6:	6001      	str	r1, [r0, #0]
 8000db8:	4770      	bx	lr
 8000dba:	0000      	.short	0x0000
 8000dbc:	e000ed88 	.word	0xe000ed88

08000dc0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <pxPortInitialiseStack+0x28>)
 8000dca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000dce:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000dd2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000dd6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000dda:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000dde:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8000de2:	3844      	subs	r0, #68	; 0x44
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	08000d45 	.word	0x08000d45
 8000dec:	00000000 	.word	0x00000000

08000df0 <SVC_Handler>:
	__asm volatile (
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <pxCurrentTCBConst2>)
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	6808      	ldr	r0, [r1, #0]
 8000df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dfa:	f380 8809 	msr	PSP, r0
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f380 8811 	msr	BASEPRI, r0
 8000e0a:	4770      	bx	lr
 8000e0c:	f3af 8000 	nop.w

08000e10 <pxCurrentTCBConst2>:
 8000e10:	20000c04 	.word	0x20000c04

08000e14 <vPortEnterCritical>:
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <vPortEnterCritical+0x3c>)
 8000e26:	6813      	ldr	r3, [r2, #0]
 8000e28:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8000e2a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8000e2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8000e2e:	d10d      	bne.n	8000e4c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <vPortEnterCritical+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000e38:	d008      	beq.n	8000e4c <vPortEnterCritical+0x38>
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	e7fe      	b.n	8000e4a <vPortEnterCritical+0x36>
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <vPortExitCritical+0x24>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	b943      	cbnz	r3, 8000e70 <vPortExitCritical+0x18>
 8000e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f3bf 8f6f 	isb	sy
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	e7fe      	b.n	8000e6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8000e70:	3b01      	subs	r3, #1
 8000e72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000e74:	b90b      	cbnz	r3, 8000e7a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	4770      	bx	lr
 8000e7c:	20000008 	.word	0x20000008

08000e80 <PendSV_Handler>:
	__asm volatile
 8000e80:	f3ef 8009 	mrs	r0, PSP
 8000e84:	f3bf 8f6f 	isb	sy
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <pxCurrentTCBConst>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f01e 0f10 	tst.w	lr, #16
 8000e90:	bf08      	it	eq
 8000e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e9a:	6010      	str	r0, [r2, #0]
 8000e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ea4:	f380 8811 	msr	BASEPRI, r0
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f000 fc88 	bl	80017c4 <vTaskSwitchContext>
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	f380 8811 	msr	BASEPRI, r0
 8000ebc:	bc09      	pop	{r0, r3}
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	6808      	ldr	r0, [r1, #0]
 8000ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec6:	f01e 0f10 	tst.w	lr, #16
 8000eca:	bf08      	it	eq
 8000ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000ed0:	f380 8809 	msr	PSP, r0
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w

08000ee0 <pxCurrentTCBConst>:
 8000ee0:	20000c04 	.word	0x20000c04

08000ee4 <xPortSysTickHandler>:
{
 8000ee4:	b508      	push	{r3, lr}
	__asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8000ef6:	f000 fb37 	bl	8001568 <xTaskIncrementTick>
 8000efa:	b118      	cbz	r0, 8000f04 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <xPortSysTickHandler+0x28>)
 8000efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000f04:	2300      	movs	r3, #0
 8000f06:	f383 8811 	msr	BASEPRI, r3
 8000f0a:	bd08      	pop	{r3, pc}
 8000f0c:	e000ed04 	.word	0xe000ed04

08000f10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f12:	4909      	ldr	r1, [pc, #36]	; (8000f38 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f18:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <vPortSetupTimerInterrupt+0x2c>)
 8000f1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	4906      	ldr	r1, [pc, #24]	; (8000f40 <vPortSetupTimerInterrupt+0x30>)
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010
 8000f38:	e000e018 	.word	0xe000e018
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	e000e014 	.word	0xe000e014

08000f44 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <xPortStartScheduler+0xe8>)
 8000f46:	4a3a      	ldr	r2, [pc, #232]	; (8001030 <xPortStartScheduler+0xec>)
{
 8000f48:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	4291      	cmp	r1, r2
 8000f4e:	d108      	bne.n	8000f62 <xPortStartScheduler+0x1e>
	__asm volatile
 8000f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	f3bf 8f6f 	isb	sy
 8000f5c:	f3bf 8f4f 	dsb	sy
 8000f60:	e7fe      	b.n	8000f60 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <xPortStartScheduler+0xf0>)
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d108      	bne.n	8000f7c <xPortStartScheduler+0x38>
 8000f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	f3bf 8f4f 	dsb	sy
 8000f7a:	e7fe      	b.n	8000f7a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <xPortStartScheduler+0xf4>)
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f88:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f8a:	4a2c      	ldr	r2, [pc, #176]	; (800103c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f9a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <xPortStartScheduler+0xfc>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8000fa8:	0600      	lsls	r0, r0, #24
 8000faa:	f102 34ff 	add.w	r4, r2, #4294967295
 8000fae:	d40d      	bmi.n	8000fcc <xPortStartScheduler+0x88>
 8000fb0:	b101      	cbz	r1, 8000fb4 <xPortStartScheduler+0x70>
 8000fb2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2a03      	cmp	r2, #3
 8000fb8:	d011      	beq.n	8000fde <xPortStartScheduler+0x9a>
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	e7fe      	b.n	8000fca <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000fcc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000fd0:	0052      	lsls	r2, r2, #1
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	f88d 2003 	strb.w	r2, [sp, #3]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4622      	mov	r2, r4
 8000fdc:	e7e2      	b.n	8000fa4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000fde:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000fe0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000fe4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <xPortStartScheduler+0xf4>)
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <xPortStartScheduler+0x100>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000ff6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8000ffe:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001000:	f7ff ff86 	bl	8000f10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <xPortStartScheduler+0x104>)
 8001006:	2400      	movs	r4, #0
 8001008:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800100a:	f7ff fecf 	bl	8000dac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <xPortStartScheduler+0x108>)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001016:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001018:	f7ff feb4 	bl	8000d84 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800101c:	f000 fbd2 	bl	80017c4 <vTaskSwitchContext>
	prvTaskExitError();
 8001020:	f7ff fe90 	bl	8000d44 <prvTaskExitError>
}
 8001024:	4620      	mov	r0, r4
 8001026:	b002      	add	sp, #8
 8001028:	bd10      	pop	{r4, pc}
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	410fc271 	.word	0x410fc271
 8001034:	410fc270 	.word	0x410fc270
 8001038:	e000e400 	.word	0xe000e400
 800103c:	2000002c 	.word	0x2000002c
 8001040:	20000030 	.word	0x20000030
 8001044:	e000ed20 	.word	0xe000ed20
 8001048:	20000008 	.word	0x20000008
 800104c:	e000ef34 	.word	0xe000ef34

08001050 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001050:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <prvInsertBlockIntoFreeList+0x40>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4282      	cmp	r2, r0
 8001058:	d318      	bcc.n	800108c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800105a:	685c      	ldr	r4, [r3, #4]
 800105c:	1919      	adds	r1, r3, r4
 800105e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001060:	bf01      	itttt	eq
 8001062:	6841      	ldreq	r1, [r0, #4]
 8001064:	4618      	moveq	r0, r3
 8001066:	1909      	addeq	r1, r1, r4
 8001068:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800106a:	6844      	ldr	r4, [r0, #4]
 800106c:	1901      	adds	r1, r0, r4
 800106e:	428a      	cmp	r2, r1
 8001070:	d107      	bne.n	8001082 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <prvInsertBlockIntoFreeList+0x44>)
 8001074:	6809      	ldr	r1, [r1, #0]
 8001076:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001078:	bf1f      	itttt	ne
 800107a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800107c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800107e:	1909      	addne	r1, r1, r4
 8001080:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001082:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001084:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001086:	bf18      	it	ne
 8001088:	6018      	strne	r0, [r3, #0]
 800108a:	bd10      	pop	{r4, pc}
 800108c:	4613      	mov	r3, r2
 800108e:	e7e1      	b.n	8001054 <prvInsertBlockIntoFreeList+0x4>
 8001090:	20000bfc 	.word	0x20000bfc
 8001094:	20000034 	.word	0x20000034

08001098 <pvPortMalloc>:
{
 8001098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800109e:	f000 fa5b 	bl	8001558 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80010a2:	493e      	ldr	r1, [pc, #248]	; (800119c <pvPortMalloc+0x104>)
 80010a4:	4d3e      	ldr	r5, [pc, #248]	; (80011a0 <pvPortMalloc+0x108>)
 80010a6:	680b      	ldr	r3, [r1, #0]
 80010a8:	bb0b      	cbnz	r3, 80010ee <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80010aa:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80010ac:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80010ae:	bf1f      	itttt	ne
 80010b0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010b2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80010b6:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 80010ba:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010bc:	bf14      	ite	ne
 80010be:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80010c0:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010c4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80010c6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010c8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010cc:	4e36      	ldr	r6, [pc, #216]	; (80011a8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80010ce:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80010d0:	2000      	movs	r0, #0
 80010d2:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010d4:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80010d6:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010d8:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010da:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80010dc:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010e0:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010e2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <pvPortMalloc+0x118>)
 80010e6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010ec:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010ee:	682f      	ldr	r7, [r5, #0]
 80010f0:	4227      	tst	r7, r4
 80010f2:	d116      	bne.n	8001122 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80010f4:	2c00      	cmp	r4, #0
 80010f6:	d041      	beq.n	800117c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80010f8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010fc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010fe:	bf1c      	itt	ne
 8001100:	f023 0307 	bicne.w	r3, r3, #7
 8001104:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001106:	b163      	cbz	r3, 8001122 <pvPortMalloc+0x8a>
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <pvPortMalloc+0x118>)
 800110a:	6816      	ldr	r6, [r2, #0]
 800110c:	42b3      	cmp	r3, r6
 800110e:	4690      	mov	r8, r2
 8001110:	d807      	bhi.n	8001122 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001112:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <pvPortMalloc+0x110>)
 8001114:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001116:	6868      	ldr	r0, [r5, #4]
 8001118:	4283      	cmp	r3, r0
 800111a:	d804      	bhi.n	8001126 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800111c:	6809      	ldr	r1, [r1, #0]
 800111e:	428d      	cmp	r5, r1
 8001120:	d107      	bne.n	8001132 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001122:	2400      	movs	r4, #0
 8001124:	e02a      	b.n	800117c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001126:	682c      	ldr	r4, [r5, #0]
 8001128:	2c00      	cmp	r4, #0
 800112a:	d0f7      	beq.n	800111c <pvPortMalloc+0x84>
 800112c:	462a      	mov	r2, r5
 800112e:	4625      	mov	r5, r4
 8001130:	e7f1      	b.n	8001116 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001132:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001134:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001136:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001138:	1ac2      	subs	r2, r0, r3
 800113a:	2a10      	cmp	r2, #16
 800113c:	d90f      	bls.n	800115e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800113e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001140:	0741      	lsls	r1, r0, #29
 8001142:	d008      	beq.n	8001156 <pvPortMalloc+0xbe>
 8001144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001148:	f383 8811 	msr	BASEPRI, r3
 800114c:	f3bf 8f6f 	isb	sy
 8001150:	f3bf 8f4f 	dsb	sy
 8001154:	e7fe      	b.n	8001154 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001156:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001158:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800115a:	f7ff ff79 	bl	8001050 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800115e:	4913      	ldr	r1, [pc, #76]	; (80011ac <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001160:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001162:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001164:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001166:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001168:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800116a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800116e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001172:	bf38      	it	cc
 8001174:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001176:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001178:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800117a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800117c:	f000 fa86 	bl	800168c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001180:	0763      	lsls	r3, r4, #29
 8001182:	d008      	beq.n	8001196 <pvPortMalloc+0xfe>
 8001184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001188:	f383 8811 	msr	BASEPRI, r3
 800118c:	f3bf 8f6f 	isb	sy
 8001190:	f3bf 8f4f 	dsb	sy
 8001194:	e7fe      	b.n	8001194 <pvPortMalloc+0xfc>
}
 8001196:	4620      	mov	r0, r4
 8001198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800119c:	20000034 	.word	0x20000034
 80011a0:	20000bf0 	.word	0x20000bf0
 80011a4:	20000038 	.word	0x20000038
 80011a8:	20000bfc 	.word	0x20000bfc
 80011ac:	20000bf8 	.word	0x20000bf8
 80011b0:	20000bf4 	.word	0x20000bf4

080011b4 <vPortFree>:
{
 80011b4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80011b6:	4604      	mov	r4, r0
 80011b8:	b370      	cbz	r0, 8001218 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <vPortFree+0x68>)
 80011bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4213      	tst	r3, r2
 80011c4:	d108      	bne.n	80011d8 <vPortFree+0x24>
 80011c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	e7fe      	b.n	80011d6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011d8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80011dc:	b141      	cbz	r1, 80011f0 <vPortFree+0x3c>
 80011de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	f3bf 8f4f 	dsb	sy
 80011ee:	e7fe      	b.n	80011ee <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f0:	ea23 0302 	bic.w	r3, r3, r2
 80011f4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80011f8:	f000 f9ae 	bl	8001558 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <vPortFree+0x6c>)
 80011fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001202:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001204:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001208:	440b      	add	r3, r1
 800120a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800120c:	f7ff ff20 	bl	8001050 <prvInsertBlockIntoFreeList>
}
 8001210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001214:	f000 ba3a 	b.w	800168c <xTaskResumeAll>
 8001218:	bd10      	pop	{r4, pc}
 800121a:	bf00      	nop
 800121c:	20000bf0 	.word	0x20000bf0
 8001220:	20000bf4 	.word	0x20000bf4

08001224 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <prvResetNextTaskUnblockTime+0x1c>)
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <prvResetNextTaskUnblockTime+0x20>)
 800122c:	b919      	cbnz	r1, 8001236 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800123a:	68d2      	ldr	r2, [r2, #12]
 800123c:	6852      	ldr	r2, [r2, #4]
 800123e:	e7f8      	b.n	8001232 <prvResetNextTaskUnblockTime+0xe>
 8001240:	20000c08 	.word	0x20000c08
 8001244:	20000ce0 	.word	0x20000ce0

08001248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800124c:	4e1b      	ldr	r6, [pc, #108]	; (80012bc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800124e:	681d      	ldr	r5, [r3, #0]
{
 8001250:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001252:	6830      	ldr	r0, [r6, #0]
 8001254:	3004      	adds	r0, #4
{
 8001256:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001258:	f7ff fd62 	bl	8000d20 <uxListRemove>
 800125c:	4633      	mov	r3, r6
 800125e:	b940      	cbnz	r0, 8001272 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001260:	6831      	ldr	r1, [r6, #0]
 8001262:	4e17      	ldr	r6, [pc, #92]	; (80012c0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001264:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001266:	6832      	ldr	r2, [r6, #0]
 8001268:	2001      	movs	r0, #1
 800126a:	4088      	lsls	r0, r1
 800126c:	ea22 0200 	bic.w	r2, r2, r0
 8001270:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001272:	1c62      	adds	r2, r4, #1
 8001274:	d107      	bne.n	8001286 <prvAddCurrentTaskToDelayedList+0x3e>
 8001276:	b137      	cbz	r7, 8001286 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800127c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800127e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001282:	f7ff bd2a 	b.w	8000cda <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001286:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001288:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800128a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800128c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800128e:	d907      	bls.n	80012a0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <prvAddCurrentTaskToDelayedList+0x80>)
 8001292:	6810      	ldr	r0, [r2, #0]
 8001294:	6819      	ldr	r1, [r3, #0]
}
 8001296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800129a:	3104      	adds	r1, #4
 800129c:	f7ff bd29 	b.w	8000cf2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <prvAddCurrentTaskToDelayedList+0x84>)
 80012a2:	6810      	ldr	r0, [r2, #0]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	3104      	adds	r1, #4
 80012a8:	f7ff fd23 	bl	8000cf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <prvAddCurrentTaskToDelayedList+0x88>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80012b2:	bf38      	it	cc
 80012b4:	601c      	strcc	r4, [r3, #0]
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b8:	20000d28 	.word	0x20000d28
 80012bc:	20000c04 	.word	0x20000c04
 80012c0:	20000cb0 	.word	0x20000cb0
 80012c4:	20000d00 	.word	0x20000d00
 80012c8:	20000c0c 	.word	0x20000c0c
 80012cc:	20000c08 	.word	0x20000c08
 80012d0:	20000ce0 	.word	0x20000ce0

080012d4 <prvIdleTask>:
{
 80012d4:	b580      	push	{r7, lr}
				taskYIELD();
 80012d6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800133c <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80012da:	4f14      	ldr	r7, [pc, #80]	; (800132c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012dc:	4c14      	ldr	r4, [pc, #80]	; (8001330 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80012de:	4e15      	ldr	r6, [pc, #84]	; (8001334 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	b963      	cbnz	r3, 80012fe <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <prvIdleTask+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d9f8      	bls.n	80012de <prvIdleTask+0xa>
				taskYIELD();
 80012ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012f0:	f8c8 3000 	str.w	r3, [r8]
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	e7ee      	b.n	80012dc <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80012fe:	f7ff fd89 	bl	8000e14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001306:	1d28      	adds	r0, r5, #4
 8001308:	f7ff fd0a 	bl	8000d20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800130c:	6833      	ldr	r3, [r6, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001318:	f7ff fd9e 	bl	8000e58 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800131c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800131e:	f7ff ff49 	bl	80011b4 <vPortFree>
			vPortFree( pxTCB );
 8001322:	4628      	mov	r0, r5
 8001324:	f7ff ff46 	bl	80011b4 <vPortFree>
 8001328:	e7da      	b.n	80012e0 <prvIdleTask+0xc>
 800132a:	bf00      	nop
 800132c:	20000d14 	.word	0x20000d14
 8001330:	20000ca0 	.word	0x20000ca0
 8001334:	20000c9c 	.word	0x20000c9c
 8001338:	20000c10 	.word	0x20000c10
 800133c:	e000ed04 	.word	0xe000ed04

08001340 <xTaskCreate>:
	{
 8001340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001344:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001348:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800134a:	4650      	mov	r0, sl
	{
 800134c:	460f      	mov	r7, r1
 800134e:	4699      	mov	r9, r3
 8001350:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001352:	f7ff fea1 	bl	8001098 <pvPortMalloc>
			if( pxStack != NULL )
 8001356:	4605      	mov	r5, r0
 8001358:	2800      	cmp	r0, #0
 800135a:	f000 8096 	beq.w	800148a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800135e:	2054      	movs	r0, #84	; 0x54
 8001360:	f7ff fe9a 	bl	8001098 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001364:	4604      	mov	r4, r0
 8001366:	2800      	cmp	r0, #0
 8001368:	f000 808c 	beq.w	8001484 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800136c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001370:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001372:	4455      	add	r5, sl
 8001374:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001376:	f025 0a07 	bic.w	sl, r5, #7
 800137a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800137e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001380:	7859      	ldrb	r1, [r3, #1]
 8001382:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001386:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800138a:	b109      	cbz	r1, 8001390 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800138c:	42bb      	cmp	r3, r7
 800138e:	d1f7      	bne.n	8001380 <xTaskCreate+0x40>
 8001390:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001392:	2d06      	cmp	r5, #6
 8001394:	bf28      	it	cs
 8001396:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001398:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800139c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800139e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80013a0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013a2:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013a4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80013a8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013ac:	f7ff fc92 	bl	8000cd4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013b0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80013b4:	f104 0018 	add.w	r0, r4, #24
 80013b8:	f7ff fc8c 	bl	8000cd4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80013bc:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80013c0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013c2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80013c6:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013ca:	464a      	mov	r2, r9
 80013cc:	4641      	mov	r1, r8
 80013ce:	4650      	mov	r0, sl
 80013d0:	f7ff fcf6 	bl	8000dc0 <pxPortInitialiseStack>
 80013d4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80013d6:	b106      	cbz	r6, 80013da <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013d8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80013da:	f7ff fd1b 	bl	8000e14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80013e0:	4e32      	ldr	r6, [pc, #200]	; (80014ac <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80014d8 <xTaskCreate+0x198>
 80013e8:	3201      	adds	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80013ec:	6835      	ldr	r5, [r6, #0]
 80013ee:	2d00      	cmp	r5, #0
 80013f0:	d14e      	bne.n	8001490 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80013f2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d11d      	bne.n	8001436 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80013fa:	eb08 0005 	add.w	r0, r8, r5
 80013fe:	3514      	adds	r5, #20
 8001400:	f7ff fc5d 	bl	8000cbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001404:	2d8c      	cmp	r5, #140	; 0x8c
 8001406:	d1f8      	bne.n	80013fa <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001408:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80014dc <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800140c:	4d28      	ldr	r5, [pc, #160]	; (80014b0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800140e:	4648      	mov	r0, r9
 8001410:	f7ff fc55 	bl	8000cbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001414:	4628      	mov	r0, r5
 8001416:	f7ff fc52 	bl	8000cbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800141a:	4826      	ldr	r0, [pc, #152]	; (80014b4 <xTaskCreate+0x174>)
 800141c:	f7ff fc4f 	bl	8000cbe <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001420:	4825      	ldr	r0, [pc, #148]	; (80014b8 <xTaskCreate+0x178>)
 8001422:	f7ff fc4c 	bl	8000cbe <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001426:	4825      	ldr	r0, [pc, #148]	; (80014bc <xTaskCreate+0x17c>)
 8001428:	f7ff fc49 	bl	8000cbe <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <xTaskCreate+0x180>)
 800142e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <xTaskCreate+0x184>)
 8001434:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001436:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001438:	4924      	ldr	r1, [pc, #144]	; (80014cc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800143a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800143c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800143e:	3301      	adds	r3, #1
 8001440:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001442:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001444:	2501      	movs	r5, #1
 8001446:	fa05 f302 	lsl.w	r3, r5, r2
 800144a:	4303      	orrs	r3, r0
 800144c:	2014      	movs	r0, #20
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	fb00 8002 	mla	r0, r0, r2, r8
 8001454:	4639      	mov	r1, r7
 8001456:	f7ff fc40 	bl	8000cda <vListInsertEnd>
	taskEXIT_CRITICAL();
 800145a:	f7ff fcfd 	bl	8000e58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <xTaskCreate+0x190>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b163      	cbz	r3, 800147e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001464:	6833      	ldr	r3, [r6, #0]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800146a:	429a      	cmp	r2, r3
 800146c:	d207      	bcs.n	800147e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <xTaskCreate+0x194>)
 8001470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f3bf 8f4f 	dsb	sy
 800147a:	f3bf 8f6f 	isb	sy
	}
 800147e:	4628      	mov	r0, r5
 8001480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001484:	4628      	mov	r0, r5
 8001486:	f7ff fe95 	bl	80011b4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800148a:	f04f 35ff 	mov.w	r5, #4294967295
 800148e:	e7f6      	b.n	800147e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <xTaskCreate+0x190>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ce      	bne.n	8001436 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001498:	6833      	ldr	r3, [r6, #0]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800149e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80014a0:	bf98      	it	ls
 80014a2:	6034      	strls	r4, [r6, #0]
 80014a4:	e7c7      	b.n	8001436 <xTaskCreate+0xf6>
 80014a6:	bf00      	nop
 80014a8:	20000c9c 	.word	0x20000c9c
 80014ac:	20000c04 	.word	0x20000c04
 80014b0:	20000cc8 	.word	0x20000cc8
 80014b4:	20000ce8 	.word	0x20000ce8
 80014b8:	20000d14 	.word	0x20000d14
 80014bc:	20000d00 	.word	0x20000d00
 80014c0:	20000c08 	.word	0x20000c08
 80014c4:	20000c0c 	.word	0x20000c0c
 80014c8:	20000cac 	.word	0x20000cac
 80014cc:	20000cb0 	.word	0x20000cb0
 80014d0:	20000cfc 	.word	0x20000cfc
 80014d4:	e000ed04 	.word	0xe000ed04
 80014d8:	20000c10 	.word	0x20000c10
 80014dc:	20000cb4 	.word	0x20000cb4

080014e0 <vTaskStartScheduler>:
{
 80014e0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <vTaskStartScheduler+0x60>)
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2400      	movs	r4, #0
 80014e8:	9400      	str	r4, [sp, #0]
 80014ea:	4623      	mov	r3, r4
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	4915      	ldr	r1, [pc, #84]	; (8001544 <vTaskStartScheduler+0x64>)
 80014f0:	4815      	ldr	r0, [pc, #84]	; (8001548 <vTaskStartScheduler+0x68>)
 80014f2:	f7ff ff25 	bl	8001340 <xTaskCreate>
	if( xReturn == pdPASS )
 80014f6:	2801      	cmp	r0, #1
 80014f8:	d114      	bne.n	8001524 <vTaskStartScheduler+0x44>
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <vTaskStartScheduler+0x6c>)
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <vTaskStartScheduler+0x70>)
 8001514:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <vTaskStartScheduler+0x74>)
 8001518:	601c      	str	r4, [r3, #0]
}
 800151a:	b002      	add	sp, #8
 800151c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001520:	f7ff bd10 	b.w	8000f44 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001524:	3001      	adds	r0, #1
 8001526:	d108      	bne.n	800153a <vTaskStartScheduler+0x5a>
 8001528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152c:	f383 8811 	msr	BASEPRI, r3
 8001530:	f3bf 8f6f 	isb	sy
 8001534:	f3bf 8f4f 	dsb	sy
 8001538:	e7fe      	b.n	8001538 <vTaskStartScheduler+0x58>
}
 800153a:	b002      	add	sp, #8
 800153c:	bd10      	pop	{r4, pc}
 800153e:	bf00      	nop
 8001540:	20000cdc 	.word	0x20000cdc
 8001544:	08001b34 	.word	0x08001b34
 8001548:	080012d5 	.word	0x080012d5
 800154c:	20000ce0 	.word	0x20000ce0
 8001550:	20000cfc 	.word	0x20000cfc
 8001554:	20000d28 	.word	0x20000d28

08001558 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001558:	4a02      	ldr	r2, [pc, #8]	; (8001564 <vTaskSuspendAll+0xc>)
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000ca8 	.word	0x20000ca8

08001568 <xTaskIncrementTick>:
{
 8001568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <xTaskIncrementTick+0xf8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d153      	bne.n	800161c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001574:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <xTaskIncrementTick+0xfc>)
 8001576:	681c      	ldr	r4, [r3, #0]
 8001578:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800157a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800157c:	b9bc      	cbnz	r4, 80015ae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <xTaskIncrementTick+0x100>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	b142      	cbz	r2, 8001598 <xTaskIncrementTick+0x30>
 8001586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	e7fe      	b.n	8001596 <xTaskIncrementTick+0x2e>
 8001598:	4a34      	ldr	r2, [pc, #208]	; (800166c <xTaskIncrementTick+0x104>)
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	6810      	ldr	r0, [r2, #0]
 800159e:	6018      	str	r0, [r3, #0]
 80015a0:	6011      	str	r1, [r2, #0]
 80015a2:	4a33      	ldr	r2, [pc, #204]	; (8001670 <xTaskIncrementTick+0x108>)
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	f7ff fe3b 	bl	8001224 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80015ae:	4d31      	ldr	r5, [pc, #196]	; (8001674 <xTaskIncrementTick+0x10c>)
 80015b0:	4f31      	ldr	r7, [pc, #196]	; (8001678 <xTaskIncrementTick+0x110>)
 80015b2:	682b      	ldr	r3, [r5, #0]
 80015b4:	429c      	cmp	r4, r3
 80015b6:	f04f 0b00 	mov.w	fp, #0
 80015ba:	d33e      	bcc.n	800163a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015bc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001668 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80015c0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001688 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015c4:	f8d8 2000 	ldr.w	r2, [r8]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	bb72      	cbnz	r2, 800162a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	602a      	str	r2, [r5, #0]
					break;
 80015d2:	e032      	b.n	800163a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015d4:	f106 0a04 	add.w	sl, r6, #4
 80015d8:	4650      	mov	r0, sl
 80015da:	f7ff fba1 	bl	8000d20 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80015e0:	b119      	cbz	r1, 80015ea <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015e2:	f106 0018 	add.w	r0, r6, #24
 80015e6:	f7ff fb9b 	bl	8000d20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80015ea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80015ec:	f8d9 3000 	ldr.w	r3, [r9]
 80015f0:	2201      	movs	r2, #1
 80015f2:	fa02 f100 	lsl.w	r1, r2, r0
 80015f6:	4319      	orrs	r1, r3
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <xTaskIncrementTick+0x114>)
 80015fa:	f8c9 1000 	str.w	r1, [r9]
 80015fe:	f04f 0e14 	mov.w	lr, #20
 8001602:	4651      	mov	r1, sl
 8001604:	fb0e 3000 	mla	r0, lr, r0, r3
 8001608:	f7ff fb67 	bl	8000cda <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001610:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001612:	4291      	cmp	r1, r2
 8001614:	bf28      	it	cs
 8001616:	f04f 0b01 	movcs.w	fp, #1
 800161a:	e7d3      	b.n	80015c4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <xTaskIncrementTick+0x118>)
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001624:	f04f 0b00 	mov.w	fp, #0
 8001628:	e011      	b.n	800164e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800162a:	f8d8 2000 	ldr.w	r2, [r8]
 800162e:	68d2      	ldr	r2, [r2, #12]
 8001630:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001632:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001634:	428c      	cmp	r4, r1
 8001636:	d2cd      	bcs.n	80015d4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001638:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <xTaskIncrementTick+0x114>)
 800163e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001640:	2214      	movs	r2, #20
 8001642:	434a      	muls	r2, r1
 8001644:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001646:	2a02      	cmp	r2, #2
 8001648:	bf28      	it	cs
 800164a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <xTaskIncrementTick+0x11c>)
 8001650:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001652:	2a00      	cmp	r2, #0
 8001654:	bf18      	it	ne
 8001656:	f04f 0b01 	movne.w	fp, #1
}
 800165a:	4658      	mov	r0, fp
 800165c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001660:	20000ca8 	.word	0x20000ca8
 8001664:	20000d28 	.word	0x20000d28
 8001668:	20000c08 	.word	0x20000c08
 800166c:	20000c0c 	.word	0x20000c0c
 8001670:	20000ce4 	.word	0x20000ce4
 8001674:	20000ce0 	.word	0x20000ce0
 8001678:	20000c04 	.word	0x20000c04
 800167c:	20000c10 	.word	0x20000c10
 8001680:	20000ca4 	.word	0x20000ca4
 8001684:	20000d2c 	.word	0x20000d2c
 8001688:	20000cb0 	.word	0x20000cb0

0800168c <xTaskResumeAll>:
{
 800168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001690:	4c31      	ldr	r4, [pc, #196]	; (8001758 <xTaskResumeAll+0xcc>)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	b943      	cbnz	r3, 80016a8 <xTaskResumeAll+0x1c>
 8001696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	e7fe      	b.n	80016a6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80016a8:	f7ff fbb4 	bl	8000e14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016b2:	6824      	ldr	r4, [r4, #0]
 80016b4:	b12c      	cbz	r4, 80016c2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80016b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80016b8:	f7ff fbce 	bl	8000e58 <vPortExitCritical>
}
 80016bc:	4620      	mov	r0, r4
 80016be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <xTaskResumeAll+0xd0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f5      	beq.n	80016b6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016ca:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001774 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80016ce:	4f24      	ldr	r7, [pc, #144]	; (8001760 <xTaskResumeAll+0xd4>)
 80016d0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001778 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016d4:	f8d9 3000 	ldr.w	r3, [r9]
 80016d8:	b9e3      	cbnz	r3, 8001714 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80016da:	b10c      	cbz	r4, 80016e0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80016dc:	f7ff fda2 	bl	8001224 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80016e0:	4d20      	ldr	r5, [pc, #128]	; (8001764 <xTaskResumeAll+0xd8>)
 80016e2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80016e4:	b144      	cbz	r4, 80016f8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80016e6:	4e20      	ldr	r6, [pc, #128]	; (8001768 <xTaskResumeAll+0xdc>)
 80016e8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80016ea:	f7ff ff3d 	bl	8001568 <xTaskIncrementTick>
 80016ee:	b100      	cbz	r0, 80016f2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80016f0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80016f2:	3c01      	subs	r4, #1
 80016f4:	d1f9      	bne.n	80016ea <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80016f6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <xTaskResumeAll+0xdc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0da      	beq.n	80016b6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <xTaskResumeAll+0xe0>)
 8001702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001710:	2401      	movs	r4, #1
 8001712:	e7d1      	b.n	80016b8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001714:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001718:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800171a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800171c:	f104 0018 	add.w	r0, r4, #24
 8001720:	f7ff fafe 	bl	8000d20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001724:	4630      	mov	r0, r6
 8001726:	f7ff fafb 	bl	8000d20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800172a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	2501      	movs	r5, #1
 8001730:	fa05 f302 	lsl.w	r3, r5, r2
 8001734:	2014      	movs	r0, #20
 8001736:	430b      	orrs	r3, r1
 8001738:	fb00 8002 	mla	r0, r0, r2, r8
 800173c:	4631      	mov	r1, r6
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	f7ff facb 	bl	8000cda <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <xTaskResumeAll+0xe4>)
 8001746:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800174e:	bf24      	itt	cs
 8001750:	4b05      	ldrcs	r3, [pc, #20]	; (8001768 <xTaskResumeAll+0xdc>)
 8001752:	601d      	strcs	r5, [r3, #0]
 8001754:	e7be      	b.n	80016d4 <xTaskResumeAll+0x48>
 8001756:	bf00      	nop
 8001758:	20000ca8 	.word	0x20000ca8
 800175c:	20000c9c 	.word	0x20000c9c
 8001760:	20000cb0 	.word	0x20000cb0
 8001764:	20000ca4 	.word	0x20000ca4
 8001768:	20000d2c 	.word	0x20000d2c
 800176c:	e000ed04 	.word	0xe000ed04
 8001770:	20000c04 	.word	0x20000c04
 8001774:	20000ce8 	.word	0x20000ce8
 8001778:	20000c10 	.word	0x20000c10

0800177c <vTaskDelay>:
	{
 800177c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800177e:	b940      	cbnz	r0, 8001792 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <vTaskDelay+0x40>)
 8001782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <vTaskDelay+0x44>)
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	b141      	cbz	r1, 80017aa <vTaskDelay+0x2e>
 8001798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	f3bf 8f6f 	isb	sy
 80017a4:	f3bf 8f4f 	dsb	sy
 80017a8:	e7fe      	b.n	80017a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80017aa:	f7ff fed5 	bl	8001558 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017ae:	f7ff fd4b 	bl	8001248 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80017b2:	f7ff ff6b 	bl	800168c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d0e2      	beq.n	8001780 <vTaskDelay+0x4>
 80017ba:	bd08      	pop	{r3, pc}
 80017bc:	e000ed04 	.word	0xe000ed04
 80017c0:	20000ca8 	.word	0x20000ca8

080017c4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <vTaskSwitchContext+0x60>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <vTaskSwitchContext+0x64>)
{
 80017ca:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017cc:	b112      	cbz	r2, 80017d4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80017ce:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80017d4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <vTaskSwitchContext+0x68>)
 80017d8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f1c3 031f 	rsb	r3, r3, #31
 80017e4:	2214      	movs	r2, #20
 80017e6:	4912      	ldr	r1, [pc, #72]	; (8001830 <vTaskSwitchContext+0x6c>)
 80017e8:	435a      	muls	r2, r3
 80017ea:	1888      	adds	r0, r1, r2
 80017ec:	588c      	ldr	r4, [r1, r2]
 80017ee:	b944      	cbnz	r4, 8001802 <vTaskSwitchContext+0x3e>
	__asm volatile
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	e7fe      	b.n	8001800 <vTaskSwitchContext+0x3c>
 8001802:	6844      	ldr	r4, [r0, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	6864      	ldr	r4, [r4, #4]
 8001808:	6044      	str	r4, [r0, #4]
 800180a:	440a      	add	r2, r1
 800180c:	4294      	cmp	r4, r2
 800180e:	bf04      	itt	eq
 8001810:	6862      	ldreq	r2, [r4, #4]
 8001812:	6042      	streq	r2, [r0, #4]
 8001814:	2214      	movs	r2, #20
 8001816:	fb02 1303 	mla	r3, r2, r3, r1
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <vTaskSwitchContext+0x70>)
 8001820:	e7d6      	b.n	80017d0 <vTaskSwitchContext+0xc>
 8001822:	bf00      	nop
 8001824:	20000ca8 	.word	0x20000ca8
 8001828:	20000d2c 	.word	0x20000d2c
 800182c:	20000cb0 	.word	0x20000cb0
 8001830:	20000c10 	.word	0x20000c10
 8001834:	20000c04 	.word	0x20000c04

08001838 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <xTaskGetSchedulerState+0x18>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b133      	cbz	r3, 800184c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <xTaskGetSchedulerState+0x1c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001844:	bf0c      	ite	eq
 8001846:	2002      	moveq	r0, #2
 8001848:	2000      	movne	r0, #0
 800184a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800184c:	2001      	movs	r0, #1
	}
 800184e:	4770      	bx	lr
 8001850:	20000cfc 	.word	0x20000cfc
 8001854:	20000ca8 	.word	0x20000ca8

08001858 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001858:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff fa27 	bl	8000cae <osDelay>
 8001860:	e7fb      	b.n	800185a <StartDefaultTask+0x2>

08001862 <SystemClock_Config>:
{
 8001862:	b500      	push	{lr}
 8001864:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	2100      	movs	r1, #0
 800186a:	a805      	add	r0, sp, #20
 800186c:	f000 f944 	bl	8001af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	2100      	movs	r1, #0
 8001872:	2214      	movs	r2, #20
 8001874:	4668      	mov	r0, sp
 8001876:	f000 f93f 	bl	8001af8 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	2210      	movs	r2, #16
 8001882:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001884:	2201      	movs	r2, #1
 8001886:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001888:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800188a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 800188c:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001890:	2207      	movs	r2, #7
 8001892:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001896:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001898:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800189a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800189c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189e:	f7fe fef1 	bl	8000684 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	200f      	movs	r0, #15
 80018a4:	2303      	movs	r3, #3
 80018a6:	e88d 0009 	stmia.w	sp, {r0, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018aa:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ae:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018b6:	f7ff f947 	bl	8000b48 <HAL_RCC_ClockConfig>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018be:	f7fe fe1b 	bl	80004f8 <HAL_PWREx_ControlVoltageScaling>
}
 80018c2:	b017      	add	sp, #92	; 0x5c
 80018c4:	f85d fb04 	ldr.w	pc, [sp], #4

080018c8 <main>:
{
 80018c8:	b500      	push	{lr}
 80018ca:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80018cc:	f7fe fca6 	bl	800021c <HAL_Init>
  SystemClock_Config();
 80018d0:	f7ff ffc7 	bl	8001862 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	2214      	movs	r2, #20
 80018d6:	2100      	movs	r1, #0
 80018d8:	eb0d 0002 	add.w	r0, sp, r2
 80018dc:	f000 f90c 	bl	8001af8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <main+0xd4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80018e2:	4d2f      	ldr	r5, [pc, #188]	; (80019a0 <main+0xd8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018e6:	f042 0204 	orr.w	r2, r2, #4
 80018ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80018ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ee:	f002 0204 	and.w	r2, r2, #4
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80018fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001900:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001904:	9202      	str	r2, [sp, #8]
 8001906:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001912:	f002 0201 	and.w	r2, r2, #1
 8001916:	9203      	str	r2, [sp, #12]
 8001918:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800191c:	f042 0202 	orr.w	r2, r2, #2
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800192c:	2120      	movs	r1, #32
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001934:	f7fe fdd2 	bl	80004dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800193e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001940:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <main+0xdc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <main+0xe0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001946:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194a:	f7fe fceb 	bl	8000324 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800194e:	230c      	movs	r3, #12
 8001950:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001962:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f7fe fcdd 	bl	8000324 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800196a:	2320      	movs	r3, #32
 800196c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800196e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800197c:	f7fe fcd2 	bl	8000324 <HAL_GPIO_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	ac05      	add	r4, sp, #20
 8001984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800198a:	4631      	mov	r1, r6
 800198c:	a805      	add	r0, sp, #20
 800198e:	f7ff f976 	bl	8000c7e <osThreadCreate>
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <main+0xe4>)
 8001994:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001996:	f7ff f96d 	bl	8000c74 <osKernelStart>
 800199a:	e7fe      	b.n	800199a <main+0xd2>
 800199c:	40021000 	.word	0x40021000
 80019a0:	08001b20 	.word	0x08001b20
 80019a4:	10210000 	.word	0x10210000
 80019a8:	48000800 	.word	0x48000800
 80019ac:	20000d34 	.word	0x20000d34

080019b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_MspInit+0x3c>)
{
 80019b2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	661a      	str	r2, [r3, #96]	; 0x60
 80019bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019be:	f002 0201 	and.w	r2, r2, #1
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	210f      	movs	r1, #15
 80019da:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e0:	f7fe fc56 	bl	8000290 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	b003      	add	sp, #12
 80019e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <NMI_Handler>:
 80019f0:	4770      	bx	lr

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler>

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	4770      	bx	lr

080019fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fe:	f7fe fc23 	bl	8000248 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a02:	f7ff ff19 	bl	8001838 <xTaskGetSchedulerState>
 8001a06:	2801      	cmp	r0, #1
 8001a08:	d003      	beq.n	8001a12 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8001a0e:	f7ff ba69 	b.w	8000ee4 <xPortSysTickHandler>
 8001a12:	bd08      	pop	{r3, pc}

08001a14 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	490f      	ldr	r1, [pc, #60]	; (8001a54 <SystemInit+0x40>)
 8001a16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <SystemInit+0x44>)
 8001a24:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a26:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001a2e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001a36:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a48:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a4a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a50:	608b      	str	r3, [r1, #8]
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	40021000 	.word	0x40021000

08001a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a62:	e003      	b.n	8001a6c <LoopCopyDataInit>

08001a64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a6a:	3104      	adds	r1, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a6c:	480b      	ldr	r0, [pc, #44]	; (8001a9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a74:	d3f6      	bcc.n	8001a64 <CopyDataInit>
	ldr	r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a78:	e002      	b.n	8001a80 <LoopFillZerobss>

08001a7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a7c:	f842 3b04 	str.w	r3, [r2], #4

08001a80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <LoopForever+0x16>)
	cmp	r2, r3
 8001a82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a84:	d3f9      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a86:	f7ff ffc5 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f000 f811 	bl	8001ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8e:	f7ff ff1b 	bl	80018c8 <main>

08001a92 <LoopForever>:

LoopForever:
    b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a94:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a98:	08001b90 	.word	0x08001b90
	ldr	r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001aa0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001aa4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001aa8:	20000d38 	.word	0x20000d38

08001aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_2_IRQHandler>
	...

08001ab0 <__libc_init_array>:
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	4e0d      	ldr	r6, [pc, #52]	; (8001ae8 <__libc_init_array+0x38>)
 8001ab4:	4c0d      	ldr	r4, [pc, #52]	; (8001aec <__libc_init_array+0x3c>)
 8001ab6:	1ba4      	subs	r4, r4, r6
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	2500      	movs	r5, #0
 8001abc:	42a5      	cmp	r5, r4
 8001abe:	d109      	bne.n	8001ad4 <__libc_init_array+0x24>
 8001ac0:	4e0b      	ldr	r6, [pc, #44]	; (8001af0 <__libc_init_array+0x40>)
 8001ac2:	4c0c      	ldr	r4, [pc, #48]	; (8001af4 <__libc_init_array+0x44>)
 8001ac4:	f000 f820 	bl	8001b08 <_init>
 8001ac8:	1ba4      	subs	r4, r4, r6
 8001aca:	10a4      	asrs	r4, r4, #2
 8001acc:	2500      	movs	r5, #0
 8001ace:	42a5      	cmp	r5, r4
 8001ad0:	d105      	bne.n	8001ade <__libc_init_array+0x2e>
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ad8:	4798      	blx	r3
 8001ada:	3501      	adds	r5, #1
 8001adc:	e7ee      	b.n	8001abc <__libc_init_array+0xc>
 8001ade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ae2:	4798      	blx	r3
 8001ae4:	3501      	adds	r5, #1
 8001ae6:	e7f2      	b.n	8001ace <__libc_init_array+0x1e>
 8001ae8:	08001b88 	.word	0x08001b88
 8001aec:	08001b88 	.word	0x08001b88
 8001af0:	08001b88 	.word	0x08001b88
 8001af4:	08001b8c 	.word	0x08001b8c

08001af8 <memset>:
 8001af8:	4402      	add	r2, r0
 8001afa:	4603      	mov	r3, r0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d100      	bne.n	8001b02 <memset+0xa>
 8001b00:	4770      	bx	lr
 8001b02:	f803 1b01 	strb.w	r1, [r3], #1
 8001b06:	e7f9      	b.n	8001afc <memset+0x4>

08001b08 <_init>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	bf00      	nop
 8001b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0e:	bc08      	pop	{r3}
 8001b10:	469e      	mov	lr, r3
 8001b12:	4770      	bx	lr

08001b14 <_fini>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	bf00      	nop
 8001b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1a:	bc08      	pop	{r3}
 8001b1c:	469e      	mov	lr, r3
 8001b1e:	4770      	bx	lr
